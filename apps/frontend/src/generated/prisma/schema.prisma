// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================
// AUTHENTICATION & USER MANAGEMENT
// ================================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  password      String?

  // Basic Info
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  username  String? @unique
  avatar    String?
  bio       String? @db.Text

  // Contact Info
  phone    String?
  website  String?
  location String?
  timezone String? @default("UTC")

  // Platform Status
  userType            UserType @default(FOUNDER) @map("user_type")
  isActive            Boolean  @default(true) @map("is_active")
  isVerified          Boolean  @default(false) @map("is_verified")
  onboardingCompleted Boolean  @default(false) @map("onboarding_completed")
  onboardingStep      Int      @default(0) @map("onboarding_step")

  // Credibility System
  credibilityScore  Float             @default(0) @map("credibility_score")
  verificationLevel VerificationLevel @default(UNVERIFIED) @map("verification_level")

  // KYC/Identity Verification
  isKycVerified Boolean  @default(false) @map("is_kyc_verified")
  kycDocuments  String[] @map("kyc_documents")

  // Timestamps
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastActiveAt DateTime? @map("last_active_at")

  // Relationships
  accounts        Account[]
  sessions        Session[]
  founderProfile  FounderProfile?
  investorProfile InvestorProfile?
  memberProfile   MemberProfile?

  // Projects & Teams
  ownedProjects        Project[]       @relation("ProjectOwner")
  participatedProjects ProjectMember[]
  ownedTeams           Team[]          @relation("TeamOwner")
  teamMemberships      TeamMember[]    @relation("TeamMemberUser")

  // Requests & Invitations
  sentRequests        Request[]    @relation("RequestSender")
  receivedRequests    Request[]    @relation("RequestReceiver")
  sentInvitations     Invitation[] @relation("InvitationSender")
  receivedInvitations Invitation[] @relation("InvitationReceiver")

  // Investments
  investments Investment[]

  // Reviews & Ratings
  givenReviews    Review[] @relation("ReviewGiver")
  receivedReviews Review[] @relation("ReviewReceiver")

  // Messages & Connections
  sentMessages        Message[]    @relation("MessageSender")
  receivedMessages    Message[]    @relation("MessageReceiver")
  connections         Connection[] @relation("ConnectionRequester")
  receivedConnections Connection[] @relation("ConnectionReceiver")

  // Skills & Interests
  skills    UserSkill[]
  interests UserInterest[]

  // Notifications & Settings
  notifications Notification[]
  settings      UserSettings?

  // Fixed missing relations
  verificationRequests VerificationRequest[]
  projectLikes         ProjectLike[]
  projectComments      ProjectComment[]
  activities           UserActivity[]
  proposals            Proposal[]
  skillEndorsements    SkillEndorsement[]    @relation("SkillEndorser")
  proposalComments     ProposalComment[]
  proposalLikes        ProposalLike[]

  @@map("users")
}

model FounderProfile {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")

  // Founder Specific Info
  companyExperience Int?     @map("company_experience") // years
  previousExits     String[] @map("previous_exits")
  linkedinProfile   String?  @map("linkedin_profile")

  // Preferences
  industryPreferences String[] @map("industry_preferences")
  locationPreferences String[] @map("location_preferences")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("founder_profiles")
}

model InvestorProfile {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")

  // Investor Type & Info
  investorType    InvestorType @map("investor_type")
  firmName        String?      @map("firm_name")
  investmentRange String?      @map("investment_range") // e.g., "$10K-$100K"
  minInvestment   Float?       @map("min_investment")
  maxInvestment   Float?       @map("max_investment")

  // Investment Preferences
  preferredStages     ProjectStage[] @map("preferred_stages")
  preferredIndustries String[]       @map("preferred_industries")
  geographicFocus     String[]       @map("geographic_focus")

  // Investment Philosophy
  investmentThesis String?  @map("investment_thesis") @db.Text
  valueAddServices String[] @map("value_add_services") // mentoring, connections, etc.

  // Track Record
  portfolioSize    Int?   @default(0) @map("portfolio_size")
  successfulExits  Int?   @default(0) @map("successful_exits")
  averageCheckSize Float? @map("average_check_size")

  // Accreditation
  isAccredited       Boolean @default(false) @map("is_accredited")
  accreditationProof String? @map("accreditation_proof")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investor_profiles")
}

model MemberProfile {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")

  // Professional Info
  jobTitle          String? @map("job_title")
  experience        Int? // years of experience
  currentSalary     Float?  @map("current_salary")
  salaryExpectation Float?  @map("salary_expectation")

  // Availability
  availabilityType AvailabilityType @default(FULL_TIME) @map("availability_type")
  hoursPerWeek     Int?             @map("hours_per_week")
  startDate        DateTime?        @map("start_date")

  // Compensation Preferences
  acceptsEquity       Boolean @default(true) @map("accepts_equity")
  acceptsCash         Boolean @default(true) @map("accepts_cash")
  acceptsDeferred     Boolean @default(false) @map("accepts_deferred")
  minEquityPercentage Float?  @map("min_equity_percentage")

  // Work Preferences
  remotePreference    RemotePreference @default(HYBRID) @map("remote_preference")
  rolePreferences     String[]         @map("role_preferences")
  industryPreferences String[]         @map("industry_preferences")

  // Portfolio & Achievements
  portfolioUrl String?  @map("portfolio_url")
  linkedinUrl  String?  @map("linkedin_url")
  githubUrl    String?  @map("github_url")
  achievements String[] @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member_profiles")
}

// ================================
// PROJECTS & STARTUPS
// ================================

model Project {
  id      String @id @default(cuid())
  ownerId String @map("owner_id")

  // Basic Info
  name        String
  description String  @db.Text
  tagline     String?
  logo        String?
  website     String?

  // Project Details
  stage    ProjectStage?
  industry String[]
  tags     String[]

  // Business Model
  revenueModel    String[] @map("revenue_model")
  targetMarket    String?  @map("target_market") @db.Text
  competitiveEdge String?  @map("competitive_edge") @db.Text

  // Funding Info
  fundingGoal   Float? @map("funding_goal")
  fundingRaised Float? @default(0) @map("funding_raised")
  valuationCap  Float? @map("valuation_cap")

  // Team & Hiring
  teamSize Int     @default(1) @map("team_size")
  isHiring Boolean @default(false) @map("is_hiring")

  // Project Status
  status     ProjectStatus @default(DRAFT)
  isActive   Boolean       @default(true) @map("is_active")
  isPublic   Boolean       @default(true) @map("is_public")
  isFeatured Boolean       @default(false) @map("is_featured")

  // Location & Remote
  location         String?
  isRemoteFriendly Boolean @default(true) @map("is_remote_friendly")

  // Media & Documents
  attachments Attachment[] @relation("ProjectAttachments")

  // Metrics
  viewCount Int @default(0) @map("view_count")
  likeCount Int @default(0) @map("like_count")

  // Timestamps
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  launchedAt DateTime? @map("launched_at")

  // Relationships
  owner       User               @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  teams       ProjectTeam[]
  investments Investment[]
  requests    Request[]
  invitations Invitation[]
  likes       ProjectLike[]
  comments    ProjectComment[]
  analytics   ProjectAnalytics[]
  reviews     Review[]
  proposals   Proposal[]

  @@map("projects")
}

model ProjectMember {
  id        String @id @default(cuid())
  projectId String @map("project_id")
  userId    String @map("user_id")

  // Role & Permissions
  role        String
  title       String?
  permissions Permission[]
  isCoFounder Boolean      @default(false) @map("is_cofounder")
  isInvestor  Boolean      @default(false) @map("is_investor")
  isMember    Boolean      @default(false) @map("is_member")

  // Compensation
  compensationType   CompensationType @map("compensation_type")
  salaryAmount       Float?           @map("salary_amount")
  equityPercentage   Float?           @map("equity_percentage")
  profitSharePercent Float?           @map("profit_share_percent")

  // Status
  status   MemberStatus @default(ACTIVE)
  joinedAt DateTime     @default(now()) @map("joined_at")
  leftAt   DateTime?    @map("left_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Team {
  id      String @id @default(cuid())
  ownerId String @map("owner_id")

  // Basic Info
  name        String
  description String  @db.Text
  avatar      String?

  // Team Details
  teamType TeamType
  industry String[]
  skills   String[]

  // Team Status
  status   TeamStatus @default(DRAFT)
  isActive Boolean    @default(true) @map("is_active")
  isHiring Boolean    @default(false) @map("is_hiring")
  size     Int        @default(1)
  maxSize  Int?       @map("max_size")

  // Location
  location String?
  isRemote Boolean @default(true) @map("is_remote")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  owner       User          @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     TeamMember[]  @relation("TeamMemberTeam")
  projects    ProjectTeam[]
  Requests    Request[]
  invitations Invitation[]
  attachments Attachment[]  @relation("TeamAttachments")
  reviews     Review[]

  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  teamId String @map("team_id")
  userId String @map("user_id")

  // Role & Status
  role        String
  title       String?
  status      MemberStatus @default(ACTIVE)
  permissions Permission[]

  // Compensation (for team-based work)
  compensationType CompensationType? @map("compensation_type")
  salaryAmount     Float?            @map("salary_amount")
  equityPercentage Float?            @map("equity_percentage")
  hourlyRate       Float?            @map("hourly_rate")

  // Timestamps
  joinedAt DateTime  @default(now()) @map("joined_at")
  leftAt   DateTime? @map("left_at")

  team Team @relation("TeamMemberTeam", fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation("TeamMemberUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model ProjectTeam {
  id        String @id @default(cuid())
  projectId String @map("project_id")
  teamId    String @map("team_id")

  role       String
  status     String   @default("active")
  assignedAt DateTime @default(now()) @map("assigned_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([projectId, teamId])
  @@map("project_teams")
}

// ================================
// INVESTMENTS & FUNDING
// ================================

model Investment {
  id         String @id @default(cuid())
  investorId String @map("investor_id")
  projectId  String @map("project_id")

  // Investment Details
  amount         Float
  investmentType InvestmentType @map("investment_type")
  equityPercent  Float?         @map("equity_percent")
  valuation      Float?

  // Terms
  liquidationPref Float?  @default(1) @map("liquidation_pref")
  antidilution    Boolean @default(false)
  boardSeat       Boolean @default(false) @map("board_seat")

  // Status & Stages
  status InvestmentStatus @default(PROPOSED)
  stage  InvestmentStage  @default(INITIAL)

  // Due Diligence
  dueDiligenceCompleted Boolean @default(false) @map("due_diligence_completed")
  legalDocsComplete     Boolean @default(false) @map("legal_docs_complete")

  // Timeline
  proposedAt  DateTime  @default(now()) @map("proposed_at")
  acceptedAt  DateTime? @map("accepted_at")
  completedAt DateTime? @map("completed_at")

  // Documents
  attachments Attachment[] @relation("InvestmentAttachments")

  // Notes
  notes String? @db.Text

  investor User    @relation(fields: [investorId], references: [id], onDelete: Cascade)
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("investments")
}

// ================================
// Request & INVITATION SYSTEM
// ================================

model Request {
  id         String @id @default(cuid())
  senderId   String @map("sender_id")
  receiverId String @map("receiver_id")

  // Request Target
  targetType  RequestTargetType @map("target_type")
  projectId   String?           @map("project_id")
  teamId      String?           @map("team_id")
  proposalId  String?           @map("proposal_id")
  roleApplied RoleType?         @map("role_applied")

  // Request Details
  role          String?
  message       String  @db.Text
  proposedTerms Json?   @map("proposed_terms")

  // Status
  status RequestStatus @default(PENDING)

  // Response
  response    String?   @db.Text
  respondedAt DateTime? @map("responded_at")

  createdAt DateTime @default(now()) @map("created_at")

  sender   User      @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User      @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  project  Project?  @relation(fields: [projectId], references: [id])
  team     Team?     @relation(fields: [teamId], references: [id])
  proposal Proposal? @relation(fields: [proposalId], references: [id])

  @@map("requests")
}

model Invitation {
  id         String @id @default(cuid())
  senderId   String @map("sender_id")
  receiverId String @map("receiver_id")

  // Invitation Target
  targetType RequestTargetType @map("target_type")
  projectId  String?           @map("project_id")
  teamId     String?           @map("team_id")

  // Invitation Details
  role    String?
  message String  @db.Text
  terms   Json?

  // Status
  status    RequestStatus @default(PENDING)
  expiresAt DateTime?     @map("expires_at")

  // Response
  response    String?   @db.Text
  respondedAt DateTime? @map("responded_at")

  createdAt DateTime @default(now()) @map("created_at")

  sender   User     @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User     @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  project  Project? @relation(fields: [projectId], references: [id])
  team     Team?    @relation(fields: [teamId], references: [id])

  @@map("invitations")
}

// ================================
// CREDIBILITY & REVIEW SYSTEM
// ================================

model Review {
  id         String @id @default(cuid())
  giverId    String @map("giver_id")
  receiverId String @map("receiver_id")

  // Review Context
  contextType ReviewContextType @map("context_type")
  projectId   String?           @map("project_id")
  teamId      String?           @map("team_id")
  proposalId  String?           @map("proposal_id")

  // Review Content
  rating  Int // 1-5 stars
  title   String?
  content String  @db.Text

  // Review Categories
  workQuality     Int? @map("work_quality") // 1-5
  communication   Int? // 1-5
  reliability     Int? // 1-5
  leadership      Int? // 1-5
  technicalSkills Int? @map("technical_skills") // 1-5

  // Status
  isVerified Boolean @default(false) @map("is_verified")
  isPublic   Boolean @default(true) @map("is_public")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  giver    User      @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver User      @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  project  Project?  @relation(fields: [projectId], references: [id])
  team     Team?     @relation(fields: [teamId], references: [id])
  proposal Proposal? @relation(fields: [proposalId], references: [id])

  @@unique([giverId, receiverId, contextType, projectId, teamId, proposalId])
  @@map("reviews")
}

model VerificationRequest {
  id     String @id @default(cuid())
  userId String @map("user_id")

  // Verification Type
  type VerificationType

  // Documents & Proof
  attachments     Attachment[] @relation("VerificationAttachments")
  linkedinProfile String?      @map("linkedin_profile")
  websiteUrl      String?      @map("website_url")
  companyEmail    String?      @map("company_email")

  // Status
  status          VerificationStatus @default(PENDING)
  reviewedBy      String?            @map("reviewed_by")
  reviewedAt      DateTime?          @map("reviewed_at")
  rejectionReason String?            @map("rejection_reason")

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_requests")
}

// ================================
// SKILLS & INTERESTS
// ================================

model Skill {
  id          String  @id @default(cuid())
  name        String  @unique
  category    String
  description String?

  userSkills UserSkill[]

  @@map("skills")
}

model UserSkill {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  skillId String @map("skill_id")

  proficiency ProficiencyLevel
  yearsOfExp  Int?             @map("years_of_exp")
  isVerified  Boolean          @default(false) @map("is_verified")

  endorsements SkillEndorsement[]

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
}

model SkillEndorsement {
  id          String @id @default(cuid())
  userSkillId String @map("user_skill_id")
  endorserId  String @map("endorser_id")

  comment   String?
  createdAt DateTime @default(now()) @map("created_at")

  userSkill UserSkill @relation(fields: [userSkillId], references: [id], onDelete: Cascade)
  endorser  User      @relation("SkillEndorser", fields: [endorserId], references: [id], onDelete: Cascade)

  @@unique([userSkillId, endorserId])
  @@map("skill_endorsements")
}

model Interest {
  id          String  @id @default(cuid())
  name        String  @unique
  category    String
  description String?

  userInterests UserInterest[]

  @@map("interests")
}

model UserInterest {
  id         String @id @default(cuid())
  userId     String @map("user_id")
  interestId String @map("interest_id")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@unique([userId, interestId])
  @@map("user_interests")
}

// ================================
// COMMUNICATION & NETWORKING
// ================================

model Connection {
  id          String @id @default(cuid())
  requesterId String @map("requester_id")
  receiverId  String @map("receiver_id")

  status  ConnectionStatus @default(PENDING)
  message String?          @db.Text

  requestedAt DateTime  @default(now()) @map("requested_at")
  acceptedAt  DateTime? @map("accepted_at")

  requester User @relation("ConnectionRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  receiver  User @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([requesterId, receiverId])
  @@map("connections")
}

model Message {
  id         String @id @default(cuid())
  senderId   String @map("sender_id")
  receiverId String @map("receiver_id")

  content String    @db.Text
  isRead  Boolean   @default(false) @map("is_read")
  readAt  DateTime? @map("read_at")

  // Attachments
  attachments String[]

  createdAt DateTime @default(now()) @map("created_at")

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// ================================
// ENGAGEMENT & SOCIAL FEATURES
// ================================

model ProjectLike {
  id        String @id @default(cuid())
  userId    String @map("user_id")
  projectId String @map("project_id")

  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_likes")
}

model ProjectComment {
  id        String @id @default(cuid())
  userId    String @map("user_id")
  projectId String @map("project_id")

  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_comments")
}

model ProposalComment {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  proposalId String   @map("proposal_id")
  content    String   @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("proposal_comments")
}

model ProposalLike {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  proposalId String   @map("proposal_id")
  createdAt  DateTime @default(now()) @map("created_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@unique([userId, proposalId])
  @@map("proposal_likes")
}

// ================================
// NOTIFICATIONS & SETTINGS
// ================================

model Notification {
  id     String @id @default(cuid())
  userId String @map("user_id")

  type    NotificationType
  title   String
  content String           @db.Text

  // Related entities
  relatedId   String? @map("related_id") // ID of related entity (project, team, etc.)
  relatedType String? @map("related_type") // Type of related entity

  isRead Boolean   @default(false) @map("is_read")
  readAt DateTime? @map("read_at")

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")

  // Privacy Settings
  profileVisibility ProfileVisibility @default(PUBLIC) @map("profile_visibility")
  showEmail         Boolean           @default(false) @map("show_email")
  showPhone         Boolean           @default(false) @map("show_phone")
  allowMessages     Boolean           @default(true) @map("allow_messages")
  allowConnections  Boolean           @default(true) @map("allow_connections")

  // Notification Preferences
  emailNotifications Boolean @default(true) @map("email_notifications")
  pushNotifications  Boolean @default(true) @map("push_notifications")

  // Specific Email Notifications
  newRequestEmail       Boolean @default(true) @map("new_request_email")
  newInvitationEmail    Boolean @default(true) @map("new_invitation_email")
  newMessageEmail       Boolean @default(true) @map("new_message_email")
  projectUpdateEmail    Boolean @default(true) @map("project_update_email")
  investmentUpdateEmail Boolean @default(true) @map("investment_update_email")
  newConnectionEmail    Boolean @default(true) @map("new_connection_email")
  weeklyDigestEmail     Boolean @default(true) @map("weekly_digest_email")
  marketingEmails       Boolean @default(false) @map("marketing_emails")

  // Discovery Settings
  showInSearch          Boolean @default(true) @map("show_in_search")
  showInRecommendations Boolean @default(true) @map("show_in_recommendations")

  // Theme & Display
  theme    String @default("system") // light, dark, system
  language String @default("en")
  timezone String @default("UTC")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// ================================
// ANALYTICS & TRACKING
// ================================

model UserActivity {
  id     String @id @default(cuid())
  userId String @map("user_id")

  action    ActivityType
  details   Json?
  ipAddress String?      @map("ip_address")
  userAgent String?      @map("user_agent")

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model ProjectAnalytics {
  id        String @id @default(cuid())
  projectId String @map("project_id")

  // View metrics
  viewCount   Int @default(0) @map("view_count")
  uniqueViews Int @default(0) @map("unique_views")

  // Engagement metrics
  likeCount    Int @default(0) @map("like_count")
  commentCount Int @default(0) @map("comment_count")
  shareCount   Int @default(0) @map("share_count")

  // Request metrics
  RequestCount Int @default(0) @map("request_count")
  acceptedApps Int @default(0) @map("accepted_apps")

  // Investment metrics
  investmentRequests Int   @default(0) @map("investment_requests")
  totalFunding       Float @default(0) @map("total_funding")

  // Time-based metrics
  date DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, date])
  @@map("project_analytics")
}

// ================================
// VERIFICATION
// ================================

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ================================
// PROPOSALS
// ================================

model Proposal {
  id        String @id @default(cuid())
  userId    String @map("user_id")
  createdBy String @db.VarChar(255)

  category ProposalType
  intent   ProposalIntent // NEW field

  projectId String? @map("project_id")
  teamId    String? @map("team_id")

  title        String @db.VarChar(200)
  shortSummary String @db.VarChar(500)
  detailedDesc String @db.Text

  industry String[]
  keywords String[]

  location    Location?
  timeline    Timeline?
  attachments Attachment[]
  contact     Contact?

  status ProposalStatus @default(DRAFT)

  // New fields for better discovery and filtering
  budget     Budget?
  visibility Visibility @default(PUBLIC)
  featured   Boolean    @default(false)
  views      Int        @default(0)
  bookmarks  Int        @default(0)

  // SEO and searchability
  slug            String?
  metaDescription String?  @db.VarChar(160)
  tags            String[]

  // Internationalization
  language String  @default("en") @db.VarChar(5)
  currency String  @default("USD") @db.VarChar(3)
  timezone String? @db.VarChar(50)

  // Relations to category-specific models
  investor  InvestorProposal?
  mentor    MentorProposal?
  team      TeamProposal?
  cofounder CoFounderProposal?
  partner   PartnerProposal?
  customer  CustomerProposal?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiresAt DateTime?

  metadata Json?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  Requests Request[]
  reviews  Review[]
  comments ProposalComment[]
  likes    ProposalLike[]

  searchVector Unsupported("tsvector")?

  @@index([userId])
  @@index([projectId])
  @@index([teamId])
  @@index([category, intent, status, createdAt]) // <- added intent to index
  @@index([industry])
  @@index([slug])
  @@map("proposals")
}

model Attachment {
  id String @id @default(cuid())

  // Relations - one attachment can belong to different entities
  proposalId            String? @map("proposal_id")
  projectId             String? @map("project_id")
  teamId                String? @map("team_id")
  investmentId          String? @map("investment_id")
  verificationRequestId String? @map("verification_request_id")

  filename String @db.VarChar(255)
  url      String @db.Text
  mimeType String @db.VarChar(100)
  size     Int

  // File classification
  type        AttachmentType
  description String?        @db.VarChar(500)
  language    String?        @db.VarChar(5)

  // Versioning & metadata
  version   Int     @default(1)
  isPrimary Boolean @default(false)
  checksum  String? @db.VarChar(64)

  // Tracking
  views     Int @default(0)
  downloads Int @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  proposal            Proposal?            @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  project             Project?             @relation("ProjectAttachments", fields: [projectId], references: [id], onDelete: Cascade)
  team                Team?                @relation("TeamAttachments", fields: [teamId], references: [id], onDelete: Cascade)
  investment          Investment?          @relation("InvestmentAttachments", fields: [investmentId], references: [id], onDelete: Cascade)
  verificationRequest VerificationRequest? @relation("VerificationAttachments", fields: [verificationRequestId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@index([type])
  @@map("attachments")
}

enum AttachmentType {
  DOCUMENT
  IMAGE
  VIDEO
  AUDIO
  LINK
  OTHER
}

enum Visibility {
  PUBLIC
  PRIVATE
  MEMBERS_ONLY
}

model Budget {
  id          String   @id @default(cuid())
  minAmount   Float?
  maxAmount   Float?
  currency    String   @default("USD") @db.VarChar(3)
  description String?  @db.Text
  proposal    Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId  String   @unique @map("proposal_id")

  @@map("budgets")
}

model Location {
  id           String   @id @default(cuid())
  country      String   @db.VarChar(100)
  countryCode  String   @db.VarChar(2)
  region       String?  @db.VarChar(100)
  city         String?  @db.VarChar(100)
  remote       Boolean  @default(false)
  hybrid       Boolean  @default(false)
  willRelocate Boolean  @default(false)
  timeZones    String[]
  proposal     Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId   String   @unique @map("proposal_id")

  @@map("locations")
}

model Timeline {
  id           String     @id @default(cuid())
  startDate    DateTime?
  endDate      DateTime?
  duration     String?
  commitment   Commitment
  availability String?
  urgency      Urgency    @default(MEDIUM)
  proposal     Proposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId   String     @unique @map("proposal_id")

  @@map("timelines")
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Contact {
  id               String        @id @default(cuid())
  name             String        @db.VarChar(100)
  email            String        @db.VarChar(255)
  phone            String?       @db.VarChar(20)
  website          String?       @db.VarChar(255)
  linkedin         String?       @db.VarChar(255)
  twitter          String?       @db.VarChar(255)
  github           String?       @db.VarChar(255)
  telegram         String?       @db.VarChar(100)
  discord          String?       @db.VarChar(100)
  preferredContact ContactMethod @default(EMAIL) @map("preferred_contact")
  publicProfile    Boolean       @default(true) @map("public_profile")
  proposal         Proposal      @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId       String        @unique @map("proposal_id")

  @@map("contacts")
}

enum ContactMethod {
  EMAIL
  PHONE
  LINKEDIN
  TELEGRAM
  DISCORD
}

// INVESTOR PROPOSALS
model InvestorProposal {
  id               String        @id @default(cuid())
  fundingNeeded    Float?        @map("funding_needed")
  fundingType      FundingType?  @map("funding_type")
  stage            StartupStage? @map("startup_stage")
  currentRevenue   Float?        @map("current_revenue")
  projectedRevenue Float?        @map("projected_revenue")
  customers        Int?
  monthlyUsers     Int?          @map("monthly_users")
  growthRate       Float?        @map("growth_rate")
  useOfFunds       String?       @map("use_of_funds") @db.Text

  // Traction metrics
  keyMetrics      Json?     @map("key_metrics")
  teamSize        Int?      @map("team_size")
  foundedDate     DateTime? @map("founded_date")
  previousFunding Float?    @map("previous_funding")

  // What they offer to investors
  equityOffered Float?  @map("equity_offered")
  boardSeat     Boolean @default(false) @map("board_seat")
  expectedROI   Float?  @map("expected_roi")
  exitStrategy  String? @map("exit_strategy") @db.Text

  // Requirements
  minInvestment Float?         @map("min_investment")
  maxInvestment Float?         @map("max_investment")
  investorKind  InvestorKind[] @map("investor_kind")

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String   @unique @map("proposal_id")

  @@map("investor_proposals")
}

enum InvestorKind {
  ANGEL
  VC
  STRATEGIC
  CROWDFUNDING
  GOVERNMENT
  FAMILY_OFFICE
}

// MENTOR PROPOSALS
model MentorProposal {
  id                String          @id @default(cuid())
  seekingOrOffering MentorDirection @map("seeking_or_offering")

  // For those seeking mentors
  guidanceAreas      String[]      @map("guidance_areas")
  specificChallenges String?       @map("specific_challenges") @db.Text
  currentStage       StartupStage? @map("current_stage")
  preferredMentorBg  String[]      @map("preferred_mentor_bg")

  // For those offering mentoring
  expertiseAreas   String[] @map("expertise_areas")
  yearsExperience  Int?     @map("years_experience")
  industriesServed String[] @map("industries_served")
  successStories   String?  @map("success_stories") @db.Text
  menteesCriteria  String?  @map("mentees_criteria") @db.Text

  // Common fields
  preferredEngage  EngagementType?    @map("preferred_engage")
  sessionFrequency String?            @map("session_frequency")
  compensationExp  MentorCompensation @default(FREE) @map("compensation_exp")

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String   @unique @map("proposal_id")

  @@map("mentor_proposals")
}

enum MentorDirection {
  SEEKING_MENTOR
  OFFERING_MENTORSHIP
}

enum MentorCompensation {
  FREE
  EQUITY
  ADVISORY_SHARES
  PAID
  BARTER
}

// TEAM PROPOSALS
model TeamProposal {
  id              String        @id @default(cuid())
  hiringOrSeeking TeamDirection @map("hiring_or_seeking")

  // Job/Role details
  roleTitle  String          @map("role_title") @db.VarChar(100)
  department String?         @db.VarChar(50)
  seniority  SeniorityLevel? @map("seniority_level")

  // Skills and requirements
  mustHaveSkills    String[] @map("must_have_skills")
  niceToHaveSkills  String[] @map("nice_to_have_skills")
  certifications    String[]
  languagesRequired String[] @map("languages_required")

  // Work arrangement
  workArrangement WorkArrangement   @default(HYBRID) @map("work_arrangement")
  compensation    CompensationType? @map("compensation_type")
  salaryRange     Json?             @map("salary_range")
  benefits        String[]

  // Company/Team info
  companySize  CompanySize?  @map("company_size")
  companyStage StartupStage? @map("company_stage")
  teamCulture  String?       @map("team_culture") @db.Text

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String   @unique @map("proposal_id")

  @@map("team_proposals")
}

enum TeamDirection {
  HIRING
  SEEKING_POSITION
}

enum WorkArrangement {
  REMOTE
  ONSITE
  HYBRID
}

enum SeniorityLevel {
  INTERN
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  PRINCIPAL
  DIRECTOR
  VP
  C_LEVEL
}

enum CompanySize {
  STARTUP_1_10
  SMALL_11_50
  MEDIUM_51_200
  LARGE_201_1000
  ENTERPRISE_1000_PLUS
}

// COFOUNDER PROPOSALS
model CoFounderProposal {
  id                String             @id @default(cuid())
  seekingOrOffering CofounderDirection @map("seeking_or_offering")

  // Role and responsibilities
  roleTitle           String   @map("role_title") @db.VarChar(100)
  keyResponsibilities String[] @map("key_responsibilities")
  decisionAreas       String[] @map("decision_areas")

  // Equity and commitment
  equityOffered   Float?  @map("equity_offered")
  equityExpected  Float?  @map("equity_expected")
  vestingSchedule String? @map("vesting_schedule")
  timeCommitment  String  @map("time_commitment")

  // Requirements and preferences
  requiredSkills      String[] @map("required_skills")
  preferredBackground String[] @map("preferred_background")
  mustHaveExperience  String[] @map("must_have_experience")
  personalityTraits   String[] @map("personality_traits")

  // Business details
  businessStage   StartupStage? @map("business_stage")
  currentTeamSize Int?          @map("current_team_size")
  businessModel   String?       @map("business_model") @db.Text
  targetMarket    String?       @map("target_market") @db.Text

  // Culture and values
  workStyle          String?  @map("work_style") @db.Text
  companyValues      String[] @map("company_values")
  conflictResolution String?  @map("conflict_resolution") @db.Text

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String   @unique @map("proposal_id")

  @@map("cofounder_proposals")
}

enum CofounderDirection {
  SEEKING_COFOUNDER
  OFFERING_COFOUNDING
}

// PARTNER PROPOSALS  
model PartnerProposal {
  id                String           @id @default(cuid())
  seekingOrOffering PartnerDirection @map("seeking_or_offering")
  partnershipType   PartnershipType  @map("partnership_type")

  // Value proposition
  valueOffered   String   @map("value_offered") @db.Text
  valueExpected  String   @map("value_expected") @db.Text
  mutualBenefits String[] @map("mutual_benefits")

  // Partnership details
  partnershipModel PartnershipModel?    @map("partnership_model")
  revenueSharing   Float?               @map("revenue_sharing")
  exclusivity      ExclusivityType      @default(NON_EXCLUSIVE)
  duration         PartnershipDuration? @map("partnership_duration")

  // Requirements
  partnerCriteria     String?  @map("partner_criteria") @db.Text
  minimumRequirements String[] @map("minimum_requirements")
  idealPartnerProfile String?  @map("ideal_partner_profile") @db.Text

  // Business context
  currentPartners Int?     @map("current_partners")
  marketReach     String[] @map("market_reach")
  customerBase    Int?     @map("customer_base")
  annualRevenue   Float?   @map("annual_revenue")

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String   @unique @map("proposal_id")

  @@map("partner_proposals")
}

enum PartnerDirection {
  SEEKING_PARTNER
  OFFERING_PARTNERSHIP
}

enum PartnershipModel {
  REVENUE_SHARE
  FIXED_FEE
  COMMISSION_BASED
  EQUITY_BASED
  BARTER
  JOINT_VENTURE
}

enum ExclusivityType {
  EXCLUSIVE
  NON_EXCLUSIVE
  SEMI_EXCLUSIVE
}

// CUSTOMER PROPOSALS
model CustomerProposal {
  id              String            @id @default(cuid())
  sellingOrBuying CustomerDirection @map("selling_or_buying")

  // Product/Service details
  productService String  @map("product_service") @db.VarChar(200)
  category       String? @db.VarChar(100)
  description    String  @db.Text

  // Pricing and availability
  pricingModel PricingModel? @map("pricing_model")
  priceRange   Json?         @map("price_range")
  availability Availability?
  deliveryTime String?       @map("delivery_time")

  // Target market (for sellers) or requirements (for buyers)
  targetAudience    String?  @map("target_audience") @db.Text
  customerBenefits  String[] @map("customer_benefits")
  uniqueSellingProp String?  @map("unique_selling_prop") @db.Text

  // For buyers
  requirements     String[]
  budgetRange      Json?    @map("budget_range")
  decisionCriteria String[] @map("decision_criteria")
  timeframe        String?

  // Business context
  marketSize      String?  @map("market_size")
  competitors     String[]
  previousClients Int?     @map("previous_clients")
  testimonials    String?  @db.Text

  // Support and terms
  supportIncluded String[] @map("support_included")
  warrantyTerms   String?  @map("warranty_terms") @db.Text
  paymentTerms    String?  @map("payment_terms") @db.VarChar(100)

  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String   @unique @map("proposal_id")

  @@map("customer_proposals")
}

enum CustomerDirection {
  SELLING
  BUYING
}

// ================================
// ENUMS
// ================================

enum UserType {
  FOUNDER
  INVESTOR
  MEMBER
  HYBRID
}

enum VerificationLevel {
  UNVERIFIED
  EMAIL_VERIFIED
  PHONE_VERIFIED
  IDENTITY_VERIFIED
  BUSINESS_VERIFIED
  PREMIUM_VERIFIED
}

enum InvestorType {
  ANGEL
  VC_FUND
  FAMILY_OFFICE
  CORPORATE_VC
  CROWDFUNDING
  GOVERNMENT
  OTHER
}

enum Commitment {
  PART_TIME
  FULL_TIME
  CONTRACT
  FLEXIBLE
}

enum FundingType {
  EQUITY
  DEBT
  GRANT
  SAFE
  CONVERTIBLE_NOTE
  REVENUE_SHARE
}

enum StartupStage {
  IDEA
  MVP
  BETA
  LAUNCHED
  GROWTH
  SCALE
}

enum EngagementType {
  ONE_OFF
  ONGOING
  MENTORSHIP
  CONSULTING
}

enum PartnershipType {
  STRATEGIC
  TECHNOLOGY
  DISTRIBUTION
  MARKETING
  JOINT_VENTURE
}

enum PartnershipDuration {
  SHORT_TERM
  MID_TERM
  LONG_TERM
}

enum PricingModel {
  FIXED
  HOURLY
  SUBSCRIPTION
  TIERED
  USAGE_BASED
}

enum Availability {
  IMMEDIATE
  WITHIN_WEEK
  WITHIN_MONTH
  NEGOTIABLE
}

enum ProjectStage {
  IDEA
  MVP
  BETA
  LAUNCHED
  GROWTH
  SCALE
  EXIT
}

enum TeamType {
  DEVELOPMENT
  MARKETING
  SALES
  DESIGN
  ADVISORY
  GENERAL
}

enum CompensationType {
  CASH_ONLY
  EQUITY_ONLY
  CASH_AND_EQUITY
  DEFERRED_CASH
  PROFIT_SHARING
  HOURLY_RATE
  PROJECT_BASED
  REVENUE_SHARE
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}

enum AvailabilityType {
  FULL_TIME
  PART_TIME
  CONTRACT
  CONSULTANT
  INTERN
}

enum RemotePreference {
  REMOTE_ONLY
  HYBRID
  ON_SITE
  FLEXIBLE
}

enum InvestmentType {
  EQUITY
  CONVERTIBLE_NOTE
  SAFE
  DEBT
  REVENUE_SHARE
  GRANT
}

enum InvestmentStatus {
  PROPOSED
  UNDER_REVIEW
  DUE_DILIGENCE
  ACCEPTED
  COMPLETED
  REJECTED
  CANCELLED
}

enum InvestmentStage {
  INITIAL
  SERIES_A
  SERIES_B
  SERIES_C
  BRIDGE
  MEZZANINE
}

enum ProposalType {
  INVESTMENT
  MENTORSHIP
  TEAM
  COFOUNDER
  PARTNERSHIP
  CUSTOMER
}

enum RoleType {
  INVESTOR
  MENTOR
  TEAM
  COFOUNDER
  PARTNER
  CUSTOMER
}

enum ProposalStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TeamStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum RequestTargetType {
  PROJECT
  TEAM
  INVESTMENT
  COLLABORATION
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  EXPIRED
}

enum ReviewContextType {
  PROJECT
  TEAM
  INVESTMENT
  GENERAL
  PROPOSAL
}

enum VerificationType {
  IDENTITY
  EDUCATION
  WORK_EXPERIENCE
  COMPANY
  INVESTOR_ACCREDITATION
  TECHNICAL_SKILLS
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum NotificationType {
  REQUEST_RECEIVED
  REQUEST_STATUS
  INVITATION_RECEIVED
  INVITATION_STATUS
  MESSAGE_RECEIVED
  CONNECTION_REQUEST
  PROJECT_UPDATE
  INVESTMENT_UPDATE
  MILESTONE_COMPLETED
  TEAM_INVITATION
  REVIEW_RECEIVED
  VERIFICATION_STATUS
  SYSTEM_ANNOUNCEMENT
}

enum ProfileVisibility {
  PUBLIC
  CONNECTIONS_ONLY
  PRIVATE
}

enum ActivityType {
  LOGIN
  LOGOUT
  PROFILE_UPDATE
  PROJECT_CREATE
  PROJECT_UPDATE
  REQUEST_SEND
  INVESTMENT_PROPOSE
  MESSAGE_SEND
  CONNECTION_REQUEST
  REVIEW_GIVE
}

enum Permission {
  VIEW_PROJECT
  EDIT_PROJECT
  DELETE_PROJECT
  MANAGE_MEMBERS
  MANAGE_FINANCES
  MANAGE_INVESTORS
  VIEW_ANALYTICS
  EDIT_PROFILE
  MANAGE_REQUESTS
  MANAGE_INVITATIONS
  CREATE_UPDATES
  MANAGE_MILESTONES
  ADMIN_ACCESS
}

enum ProposalIntent {
  SEEKING
  OFFERING
}
