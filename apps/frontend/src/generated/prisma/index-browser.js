
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailVerified: 'emailVerified',
  name: 'name',
  image: 'image',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  avatar: 'avatar',
  bio: 'bio',
  phone: 'phone',
  website: 'website',
  location: 'location',
  timezone: 'timezone',
  userType: 'userType',
  isActive: 'isActive',
  isVerified: 'isVerified',
  onboardingCompleted: 'onboardingCompleted',
  onboardingStep: 'onboardingStep',
  credibilityScore: 'credibilityScore',
  verificationLevel: 'verificationLevel',
  isKycVerified: 'isKycVerified',
  kycDocuments: 'kycDocuments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.FounderProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyExperience: 'companyExperience',
  previousExits: 'previousExits',
  linkedinProfile: 'linkedinProfile',
  industryPreferences: 'industryPreferences',
  locationPreferences: 'locationPreferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvestorProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  investorType: 'investorType',
  firmName: 'firmName',
  investmentRange: 'investmentRange',
  minInvestment: 'minInvestment',
  maxInvestment: 'maxInvestment',
  preferredStages: 'preferredStages',
  preferredIndustries: 'preferredIndustries',
  geographicFocus: 'geographicFocus',
  investmentThesis: 'investmentThesis',
  valueAddServices: 'valueAddServices',
  portfolioSize: 'portfolioSize',
  successfulExits: 'successfulExits',
  averageCheckSize: 'averageCheckSize',
  isAccredited: 'isAccredited',
  accreditationProof: 'accreditationProof',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobTitle: 'jobTitle',
  experience: 'experience',
  currentSalary: 'currentSalary',
  salaryExpectation: 'salaryExpectation',
  availabilityType: 'availabilityType',
  hoursPerWeek: 'hoursPerWeek',
  startDate: 'startDate',
  acceptsEquity: 'acceptsEquity',
  acceptsCash: 'acceptsCash',
  acceptsDeferred: 'acceptsDeferred',
  minEquityPercentage: 'minEquityPercentage',
  remotePreference: 'remotePreference',
  rolePreferences: 'rolePreferences',
  industryPreferences: 'industryPreferences',
  portfolioUrl: 'portfolioUrl',
  linkedinUrl: 'linkedinUrl',
  githubUrl: 'githubUrl',
  achievements: 'achievements',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  name: 'name',
  description: 'description',
  tagline: 'tagline',
  logo: 'logo',
  website: 'website',
  stage: 'stage',
  industry: 'industry',
  tags: 'tags',
  revenueModel: 'revenueModel',
  targetMarket: 'targetMarket',
  competitiveEdge: 'competitiveEdge',
  fundingGoal: 'fundingGoal',
  fundingRaised: 'fundingRaised',
  valuationCap: 'valuationCap',
  teamSize: 'teamSize',
  isHiring: 'isHiring',
  status: 'status',
  isActive: 'isActive',
  isPublic: 'isPublic',
  isFeatured: 'isFeatured',
  location: 'location',
  isRemoteFriendly: 'isRemoteFriendly',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  launchedAt: 'launchedAt'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  role: 'role',
  title: 'title',
  permissions: 'permissions',
  isCoFounder: 'isCoFounder',
  isInvestor: 'isInvestor',
  isMember: 'isMember',
  compensationType: 'compensationType',
  salaryAmount: 'salaryAmount',
  equityPercentage: 'equityPercentage',
  profitSharePercent: 'profitSharePercent',
  status: 'status',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  name: 'name',
  description: 'description',
  avatar: 'avatar',
  teamType: 'teamType',
  industry: 'industry',
  skills: 'skills',
  status: 'status',
  isActive: 'isActive',
  isHiring: 'isHiring',
  size: 'size',
  maxSize: 'maxSize',
  location: 'location',
  isRemote: 'isRemote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  userId: 'userId',
  role: 'role',
  title: 'title',
  status: 'status',
  permissions: 'permissions',
  compensationType: 'compensationType',
  salaryAmount: 'salaryAmount',
  equityPercentage: 'equityPercentage',
  hourlyRate: 'hourlyRate',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt'
};

exports.Prisma.ProjectTeamScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  teamId: 'teamId',
  role: 'role',
  status: 'status',
  assignedAt: 'assignedAt'
};

exports.Prisma.InvestmentScalarFieldEnum = {
  id: 'id',
  investorId: 'investorId',
  projectId: 'projectId',
  amount: 'amount',
  investmentType: 'investmentType',
  equityPercent: 'equityPercent',
  valuation: 'valuation',
  liquidationPref: 'liquidationPref',
  antidilution: 'antidilution',
  boardSeat: 'boardSeat',
  status: 'status',
  stage: 'stage',
  dueDiligenceCompleted: 'dueDiligenceCompleted',
  legalDocsComplete: 'legalDocsComplete',
  proposedAt: 'proposedAt',
  acceptedAt: 'acceptedAt',
  completedAt: 'completedAt',
  notes: 'notes'
};

exports.Prisma.RequestScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  targetType: 'targetType',
  projectId: 'projectId',
  teamId: 'teamId',
  proposalId: 'proposalId',
  roleApplied: 'roleApplied',
  role: 'role',
  message: 'message',
  proposedTerms: 'proposedTerms',
  status: 'status',
  response: 'response',
  respondedAt: 'respondedAt',
  createdAt: 'createdAt'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  targetType: 'targetType',
  projectId: 'projectId',
  teamId: 'teamId',
  role: 'role',
  message: 'message',
  terms: 'terms',
  status: 'status',
  expiresAt: 'expiresAt',
  response: 'response',
  respondedAt: 'respondedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  giverId: 'giverId',
  receiverId: 'receiverId',
  contextType: 'contextType',
  projectId: 'projectId',
  teamId: 'teamId',
  proposalId: 'proposalId',
  rating: 'rating',
  title: 'title',
  content: 'content',
  workQuality: 'workQuality',
  communication: 'communication',
  reliability: 'reliability',
  leadership: 'leadership',
  technicalSkills: 'technicalSkills',
  isVerified: 'isVerified',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  linkedinProfile: 'linkedinProfile',
  websiteUrl: 'websiteUrl',
  companyEmail: 'companyEmail',
  status: 'status',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description'
};

exports.Prisma.UserSkillScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId',
  proficiency: 'proficiency',
  yearsOfExp: 'yearsOfExp',
  isVerified: 'isVerified'
};

exports.Prisma.SkillEndorsementScalarFieldEnum = {
  id: 'id',
  userSkillId: 'userSkillId',
  endorserId: 'endorserId',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.InterestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description'
};

exports.Prisma.UserInterestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  interestId: 'interestId'
};

exports.Prisma.ConnectionScalarFieldEnum = {
  id: 'id',
  requesterId: 'requesterId',
  receiverId: 'receiverId',
  status: 'status',
  message: 'message',
  requestedAt: 'requestedAt',
  acceptedAt: 'acceptedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  isRead: 'isRead',
  readAt: 'readAt',
  attachments: 'attachments',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectLikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectCommentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProposalCommentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  proposalId: 'proposalId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProposalLikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  proposalId: 'proposalId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  content: 'content',
  relatedId: 'relatedId',
  relatedType: 'relatedType',
  isRead: 'isRead',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  profileVisibility: 'profileVisibility',
  showEmail: 'showEmail',
  showPhone: 'showPhone',
  allowMessages: 'allowMessages',
  allowConnections: 'allowConnections',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  newRequestEmail: 'newRequestEmail',
  newInvitationEmail: 'newInvitationEmail',
  newMessageEmail: 'newMessageEmail',
  projectUpdateEmail: 'projectUpdateEmail',
  investmentUpdateEmail: 'investmentUpdateEmail',
  newConnectionEmail: 'newConnectionEmail',
  weeklyDigestEmail: 'weeklyDigestEmail',
  marketingEmails: 'marketingEmails',
  showInSearch: 'showInSearch',
  showInRecommendations: 'showInRecommendations',
  theme: 'theme',
  language: 'language',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectAnalyticsScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  viewCount: 'viewCount',
  uniqueViews: 'uniqueViews',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  shareCount: 'shareCount',
  RequestCount: 'RequestCount',
  acceptedApps: 'acceptedApps',
  investmentRequests: 'investmentRequests',
  totalFunding: 'totalFunding',
  date: 'date'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.ProposalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdBy: 'createdBy',
  category: 'category',
  intent: 'intent',
  projectId: 'projectId',
  teamId: 'teamId',
  title: 'title',
  shortSummary: 'shortSummary',
  detailedDesc: 'detailedDesc',
  industry: 'industry',
  keywords: 'keywords',
  status: 'status',
  visibility: 'visibility',
  featured: 'featured',
  views: 'views',
  bookmarks: 'bookmarks',
  slug: 'slug',
  metaDescription: 'metaDescription',
  tags: 'tags',
  language: 'language',
  currency: 'currency',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  metadata: 'metadata'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  proposalId: 'proposalId',
  projectId: 'projectId',
  teamId: 'teamId',
  investmentId: 'investmentId',
  verificationRequestId: 'verificationRequestId',
  filename: 'filename',
  url: 'url',
  mimeType: 'mimeType',
  size: 'size',
  type: 'type',
  description: 'description',
  language: 'language',
  version: 'version',
  isPrimary: 'isPrimary',
  checksum: 'checksum',
  views: 'views',
  downloads: 'downloads',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  minAmount: 'minAmount',
  maxAmount: 'maxAmount',
  currency: 'currency',
  description: 'description',
  proposalId: 'proposalId'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  country: 'country',
  countryCode: 'countryCode',
  region: 'region',
  city: 'city',
  remote: 'remote',
  hybrid: 'hybrid',
  willRelocate: 'willRelocate',
  timeZones: 'timeZones',
  proposalId: 'proposalId'
};

exports.Prisma.TimelineScalarFieldEnum = {
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  duration: 'duration',
  commitment: 'commitment',
  availability: 'availability',
  urgency: 'urgency',
  proposalId: 'proposalId'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  website: 'website',
  linkedin: 'linkedin',
  twitter: 'twitter',
  github: 'github',
  telegram: 'telegram',
  discord: 'discord',
  preferredContact: 'preferredContact',
  publicProfile: 'publicProfile',
  proposalId: 'proposalId'
};

exports.Prisma.InvestorProposalScalarFieldEnum = {
  id: 'id',
  fundingNeeded: 'fundingNeeded',
  fundingType: 'fundingType',
  stage: 'stage',
  currentRevenue: 'currentRevenue',
  projectedRevenue: 'projectedRevenue',
  customers: 'customers',
  monthlyUsers: 'monthlyUsers',
  growthRate: 'growthRate',
  useOfFunds: 'useOfFunds',
  keyMetrics: 'keyMetrics',
  teamSize: 'teamSize',
  foundedDate: 'foundedDate',
  previousFunding: 'previousFunding',
  equityOffered: 'equityOffered',
  boardSeat: 'boardSeat',
  expectedROI: 'expectedROI',
  exitStrategy: 'exitStrategy',
  minInvestment: 'minInvestment',
  maxInvestment: 'maxInvestment',
  investorKind: 'investorKind',
  proposalId: 'proposalId'
};

exports.Prisma.MentorProposalScalarFieldEnum = {
  id: 'id',
  seekingOrOffering: 'seekingOrOffering',
  guidanceAreas: 'guidanceAreas',
  specificChallenges: 'specificChallenges',
  currentStage: 'currentStage',
  preferredMentorBg: 'preferredMentorBg',
  expertiseAreas: 'expertiseAreas',
  yearsExperience: 'yearsExperience',
  industriesServed: 'industriesServed',
  successStories: 'successStories',
  menteesCriteria: 'menteesCriteria',
  preferredEngage: 'preferredEngage',
  sessionFrequency: 'sessionFrequency',
  compensationExp: 'compensationExp',
  proposalId: 'proposalId'
};

exports.Prisma.TeamProposalScalarFieldEnum = {
  id: 'id',
  hiringOrSeeking: 'hiringOrSeeking',
  roleTitle: 'roleTitle',
  department: 'department',
  seniority: 'seniority',
  mustHaveSkills: 'mustHaveSkills',
  niceToHaveSkills: 'niceToHaveSkills',
  certifications: 'certifications',
  languagesRequired: 'languagesRequired',
  workArrangement: 'workArrangement',
  compensation: 'compensation',
  salaryRange: 'salaryRange',
  benefits: 'benefits',
  companySize: 'companySize',
  companyStage: 'companyStage',
  teamCulture: 'teamCulture',
  proposalId: 'proposalId'
};

exports.Prisma.CoFounderProposalScalarFieldEnum = {
  id: 'id',
  seekingOrOffering: 'seekingOrOffering',
  roleTitle: 'roleTitle',
  keyResponsibilities: 'keyResponsibilities',
  decisionAreas: 'decisionAreas',
  equityOffered: 'equityOffered',
  equityExpected: 'equityExpected',
  vestingSchedule: 'vestingSchedule',
  timeCommitment: 'timeCommitment',
  requiredSkills: 'requiredSkills',
  preferredBackground: 'preferredBackground',
  mustHaveExperience: 'mustHaveExperience',
  personalityTraits: 'personalityTraits',
  businessStage: 'businessStage',
  currentTeamSize: 'currentTeamSize',
  businessModel: 'businessModel',
  targetMarket: 'targetMarket',
  workStyle: 'workStyle',
  companyValues: 'companyValues',
  conflictResolution: 'conflictResolution',
  proposalId: 'proposalId'
};

exports.Prisma.PartnerProposalScalarFieldEnum = {
  id: 'id',
  seekingOrOffering: 'seekingOrOffering',
  partnershipType: 'partnershipType',
  valueOffered: 'valueOffered',
  valueExpected: 'valueExpected',
  mutualBenefits: 'mutualBenefits',
  partnershipModel: 'partnershipModel',
  revenueSharing: 'revenueSharing',
  exclusivity: 'exclusivity',
  duration: 'duration',
  partnerCriteria: 'partnerCriteria',
  minimumRequirements: 'minimumRequirements',
  idealPartnerProfile: 'idealPartnerProfile',
  currentPartners: 'currentPartners',
  marketReach: 'marketReach',
  customerBase: 'customerBase',
  annualRevenue: 'annualRevenue',
  proposalId: 'proposalId'
};

exports.Prisma.CustomerProposalScalarFieldEnum = {
  id: 'id',
  sellingOrBuying: 'sellingOrBuying',
  productService: 'productService',
  category: 'category',
  description: 'description',
  pricingModel: 'pricingModel',
  priceRange: 'priceRange',
  availability: 'availability',
  deliveryTime: 'deliveryTime',
  targetAudience: 'targetAudience',
  customerBenefits: 'customerBenefits',
  uniqueSellingProp: 'uniqueSellingProp',
  requirements: 'requirements',
  budgetRange: 'budgetRange',
  decisionCriteria: 'decisionCriteria',
  timeframe: 'timeframe',
  marketSize: 'marketSize',
  competitors: 'competitors',
  previousClients: 'previousClients',
  testimonials: 'testimonials',
  supportIncluded: 'supportIncluded',
  warrantyTerms: 'warrantyTerms',
  paymentTerms: 'paymentTerms',
  proposalId: 'proposalId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserType = exports.$Enums.UserType = {
  FOUNDER: 'FOUNDER',
  INVESTOR: 'INVESTOR',
  MEMBER: 'MEMBER',
  HYBRID: 'HYBRID'
};

exports.VerificationLevel = exports.$Enums.VerificationLevel = {
  UNVERIFIED: 'UNVERIFIED',
  EMAIL_VERIFIED: 'EMAIL_VERIFIED',
  PHONE_VERIFIED: 'PHONE_VERIFIED',
  IDENTITY_VERIFIED: 'IDENTITY_VERIFIED',
  BUSINESS_VERIFIED: 'BUSINESS_VERIFIED',
  PREMIUM_VERIFIED: 'PREMIUM_VERIFIED'
};

exports.InvestorType = exports.$Enums.InvestorType = {
  ANGEL: 'ANGEL',
  VC_FUND: 'VC_FUND',
  FAMILY_OFFICE: 'FAMILY_OFFICE',
  CORPORATE_VC: 'CORPORATE_VC',
  CROWDFUNDING: 'CROWDFUNDING',
  GOVERNMENT: 'GOVERNMENT',
  OTHER: 'OTHER'
};

exports.ProjectStage = exports.$Enums.ProjectStage = {
  IDEA: 'IDEA',
  MVP: 'MVP',
  BETA: 'BETA',
  LAUNCHED: 'LAUNCHED',
  GROWTH: 'GROWTH',
  SCALE: 'SCALE',
  EXIT: 'EXIT'
};

exports.AvailabilityType = exports.$Enums.AvailabilityType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  CONSULTANT: 'CONSULTANT',
  INTERN: 'INTERN'
};

exports.RemotePreference = exports.$Enums.RemotePreference = {
  REMOTE_ONLY: 'REMOTE_ONLY',
  HYBRID: 'HYBRID',
  ON_SITE: 'ON_SITE',
  FLEXIBLE: 'FLEXIBLE'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.CompensationType = exports.$Enums.CompensationType = {
  CASH_ONLY: 'CASH_ONLY',
  EQUITY_ONLY: 'EQUITY_ONLY',
  CASH_AND_EQUITY: 'CASH_AND_EQUITY',
  DEFERRED_CASH: 'DEFERRED_CASH',
  PROFIT_SHARING: 'PROFIT_SHARING',
  HOURLY_RATE: 'HOURLY_RATE',
  PROJECT_BASED: 'PROJECT_BASED',
  REVENUE_SHARE: 'REVENUE_SHARE'
};

exports.MemberStatus = exports.$Enums.MemberStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  TERMINATED: 'TERMINATED'
};

exports.Permission = exports.$Enums.Permission = {
  VIEW_PROJECT: 'VIEW_PROJECT',
  EDIT_PROJECT: 'EDIT_PROJECT',
  DELETE_PROJECT: 'DELETE_PROJECT',
  MANAGE_MEMBERS: 'MANAGE_MEMBERS',
  MANAGE_FINANCES: 'MANAGE_FINANCES',
  MANAGE_INVESTORS: 'MANAGE_INVESTORS',
  VIEW_ANALYTICS: 'VIEW_ANALYTICS',
  EDIT_PROFILE: 'EDIT_PROFILE',
  MANAGE_REQUESTS: 'MANAGE_REQUESTS',
  MANAGE_INVITATIONS: 'MANAGE_INVITATIONS',
  CREATE_UPDATES: 'CREATE_UPDATES',
  MANAGE_MILESTONES: 'MANAGE_MILESTONES',
  ADMIN_ACCESS: 'ADMIN_ACCESS'
};

exports.TeamType = exports.$Enums.TeamType = {
  DEVELOPMENT: 'DEVELOPMENT',
  MARKETING: 'MARKETING',
  SALES: 'SALES',
  DESIGN: 'DESIGN',
  ADVISORY: 'ADVISORY',
  GENERAL: 'GENERAL'
};

exports.TeamStatus = exports.$Enums.TeamStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.InvestmentType = exports.$Enums.InvestmentType = {
  EQUITY: 'EQUITY',
  CONVERTIBLE_NOTE: 'CONVERTIBLE_NOTE',
  SAFE: 'SAFE',
  DEBT: 'DEBT',
  REVENUE_SHARE: 'REVENUE_SHARE',
  GRANT: 'GRANT'
};

exports.InvestmentStatus = exports.$Enums.InvestmentStatus = {
  PROPOSED: 'PROPOSED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  DUE_DILIGENCE: 'DUE_DILIGENCE',
  ACCEPTED: 'ACCEPTED',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.InvestmentStage = exports.$Enums.InvestmentStage = {
  INITIAL: 'INITIAL',
  SERIES_A: 'SERIES_A',
  SERIES_B: 'SERIES_B',
  SERIES_C: 'SERIES_C',
  BRIDGE: 'BRIDGE',
  MEZZANINE: 'MEZZANINE'
};

exports.RequestTargetType = exports.$Enums.RequestTargetType = {
  PROJECT: 'PROJECT',
  TEAM: 'TEAM',
  INVESTMENT: 'INVESTMENT',
  COLLABORATION: 'COLLABORATION'
};

exports.RoleType = exports.$Enums.RoleType = {
  INVESTOR: 'INVESTOR',
  MENTOR: 'MENTOR',
  TEAM: 'TEAM',
  COFOUNDER: 'COFOUNDER',
  PARTNER: 'PARTNER',
  CUSTOMER: 'CUSTOMER'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN',
  EXPIRED: 'EXPIRED'
};

exports.ReviewContextType = exports.$Enums.ReviewContextType = {
  PROJECT: 'PROJECT',
  TEAM: 'TEAM',
  INVESTMENT: 'INVESTMENT',
  GENERAL: 'GENERAL',
  PROPOSAL: 'PROPOSAL'
};

exports.VerificationType = exports.$Enums.VerificationType = {
  IDENTITY: 'IDENTITY',
  EDUCATION: 'EDUCATION',
  WORK_EXPERIENCE: 'WORK_EXPERIENCE',
  COMPANY: 'COMPANY',
  INVESTOR_ACCREDITATION: 'INVESTOR_ACCREDITATION',
  TECHNICAL_SKILLS: 'TECHNICAL_SKILLS'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.ProficiencyLevel = exports.$Enums.ProficiencyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

exports.ConnectionStatus = exports.$Enums.ConnectionStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  BLOCKED: 'BLOCKED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  REQUEST_RECEIVED: 'REQUEST_RECEIVED',
  REQUEST_STATUS: 'REQUEST_STATUS',
  INVITATION_RECEIVED: 'INVITATION_RECEIVED',
  INVITATION_STATUS: 'INVITATION_STATUS',
  MESSAGE_RECEIVED: 'MESSAGE_RECEIVED',
  CONNECTION_REQUEST: 'CONNECTION_REQUEST',
  PROJECT_UPDATE: 'PROJECT_UPDATE',
  INVESTMENT_UPDATE: 'INVESTMENT_UPDATE',
  MILESTONE_COMPLETED: 'MILESTONE_COMPLETED',
  TEAM_INVITATION: 'TEAM_INVITATION',
  REVIEW_RECEIVED: 'REVIEW_RECEIVED',
  VERIFICATION_STATUS: 'VERIFICATION_STATUS',
  SYSTEM_ANNOUNCEMENT: 'SYSTEM_ANNOUNCEMENT'
};

exports.ProfileVisibility = exports.$Enums.ProfileVisibility = {
  PUBLIC: 'PUBLIC',
  CONNECTIONS_ONLY: 'CONNECTIONS_ONLY',
  PRIVATE: 'PRIVATE'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  PROFILE_UPDATE: 'PROFILE_UPDATE',
  PROJECT_CREATE: 'PROJECT_CREATE',
  PROJECT_UPDATE: 'PROJECT_UPDATE',
  REQUEST_SEND: 'REQUEST_SEND',
  INVESTMENT_PROPOSE: 'INVESTMENT_PROPOSE',
  MESSAGE_SEND: 'MESSAGE_SEND',
  CONNECTION_REQUEST: 'CONNECTION_REQUEST',
  REVIEW_GIVE: 'REVIEW_GIVE'
};

exports.ProposalType = exports.$Enums.ProposalType = {
  INVESTMENT: 'INVESTMENT',
  MENTORSHIP: 'MENTORSHIP',
  TEAM: 'TEAM',
  COFOUNDER: 'COFOUNDER',
  PARTNERSHIP: 'PARTNERSHIP',
  CUSTOMER: 'CUSTOMER'
};

exports.ProposalIntent = exports.$Enums.ProposalIntent = {
  SEEKING: 'SEEKING',
  OFFERING: 'OFFERING'
};

exports.ProposalStatus = exports.$Enums.ProposalStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.Visibility = exports.$Enums.Visibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  MEMBERS_ONLY: 'MEMBERS_ONLY'
};

exports.AttachmentType = exports.$Enums.AttachmentType = {
  DOCUMENT: 'DOCUMENT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  LINK: 'LINK',
  OTHER: 'OTHER'
};

exports.Commitment = exports.$Enums.Commitment = {
  PART_TIME: 'PART_TIME',
  FULL_TIME: 'FULL_TIME',
  CONTRACT: 'CONTRACT',
  FLEXIBLE: 'FLEXIBLE'
};

exports.Urgency = exports.$Enums.Urgency = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ContactMethod = exports.$Enums.ContactMethod = {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  LINKEDIN: 'LINKEDIN',
  TELEGRAM: 'TELEGRAM',
  DISCORD: 'DISCORD'
};

exports.FundingType = exports.$Enums.FundingType = {
  EQUITY: 'EQUITY',
  DEBT: 'DEBT',
  GRANT: 'GRANT',
  SAFE: 'SAFE',
  CONVERTIBLE_NOTE: 'CONVERTIBLE_NOTE',
  REVENUE_SHARE: 'REVENUE_SHARE'
};

exports.StartupStage = exports.$Enums.StartupStage = {
  IDEA: 'IDEA',
  MVP: 'MVP',
  BETA: 'BETA',
  LAUNCHED: 'LAUNCHED',
  GROWTH: 'GROWTH',
  SCALE: 'SCALE'
};

exports.InvestorKind = exports.$Enums.InvestorKind = {
  ANGEL: 'ANGEL',
  VC: 'VC',
  STRATEGIC: 'STRATEGIC',
  CROWDFUNDING: 'CROWDFUNDING',
  GOVERNMENT: 'GOVERNMENT',
  FAMILY_OFFICE: 'FAMILY_OFFICE'
};

exports.MentorDirection = exports.$Enums.MentorDirection = {
  SEEKING_MENTOR: 'SEEKING_MENTOR',
  OFFERING_MENTORSHIP: 'OFFERING_MENTORSHIP'
};

exports.EngagementType = exports.$Enums.EngagementType = {
  ONE_OFF: 'ONE_OFF',
  ONGOING: 'ONGOING',
  MENTORSHIP: 'MENTORSHIP',
  CONSULTING: 'CONSULTING'
};

exports.MentorCompensation = exports.$Enums.MentorCompensation = {
  FREE: 'FREE',
  EQUITY: 'EQUITY',
  ADVISORY_SHARES: 'ADVISORY_SHARES',
  PAID: 'PAID',
  BARTER: 'BARTER'
};

exports.TeamDirection = exports.$Enums.TeamDirection = {
  HIRING: 'HIRING',
  SEEKING_POSITION: 'SEEKING_POSITION'
};

exports.SeniorityLevel = exports.$Enums.SeniorityLevel = {
  INTERN: 'INTERN',
  JUNIOR: 'JUNIOR',
  MID_LEVEL: 'MID_LEVEL',
  SENIOR: 'SENIOR',
  LEAD: 'LEAD',
  PRINCIPAL: 'PRINCIPAL',
  DIRECTOR: 'DIRECTOR',
  VP: 'VP',
  C_LEVEL: 'C_LEVEL'
};

exports.WorkArrangement = exports.$Enums.WorkArrangement = {
  REMOTE: 'REMOTE',
  ONSITE: 'ONSITE',
  HYBRID: 'HYBRID'
};

exports.CompanySize = exports.$Enums.CompanySize = {
  STARTUP_1_10: 'STARTUP_1_10',
  SMALL_11_50: 'SMALL_11_50',
  MEDIUM_51_200: 'MEDIUM_51_200',
  LARGE_201_1000: 'LARGE_201_1000',
  ENTERPRISE_1000_PLUS: 'ENTERPRISE_1000_PLUS'
};

exports.CofounderDirection = exports.$Enums.CofounderDirection = {
  SEEKING_COFOUNDER: 'SEEKING_COFOUNDER',
  OFFERING_COFOUNDING: 'OFFERING_COFOUNDING'
};

exports.PartnerDirection = exports.$Enums.PartnerDirection = {
  SEEKING_PARTNER: 'SEEKING_PARTNER',
  OFFERING_PARTNERSHIP: 'OFFERING_PARTNERSHIP'
};

exports.PartnershipType = exports.$Enums.PartnershipType = {
  STRATEGIC: 'STRATEGIC',
  TECHNOLOGY: 'TECHNOLOGY',
  DISTRIBUTION: 'DISTRIBUTION',
  MARKETING: 'MARKETING',
  JOINT_VENTURE: 'JOINT_VENTURE'
};

exports.PartnershipModel = exports.$Enums.PartnershipModel = {
  REVENUE_SHARE: 'REVENUE_SHARE',
  FIXED_FEE: 'FIXED_FEE',
  COMMISSION_BASED: 'COMMISSION_BASED',
  EQUITY_BASED: 'EQUITY_BASED',
  BARTER: 'BARTER',
  JOINT_VENTURE: 'JOINT_VENTURE'
};

exports.ExclusivityType = exports.$Enums.ExclusivityType = {
  EXCLUSIVE: 'EXCLUSIVE',
  NON_EXCLUSIVE: 'NON_EXCLUSIVE',
  SEMI_EXCLUSIVE: 'SEMI_EXCLUSIVE'
};

exports.PartnershipDuration = exports.$Enums.PartnershipDuration = {
  SHORT_TERM: 'SHORT_TERM',
  MID_TERM: 'MID_TERM',
  LONG_TERM: 'LONG_TERM'
};

exports.CustomerDirection = exports.$Enums.CustomerDirection = {
  SELLING: 'SELLING',
  BUYING: 'BUYING'
};

exports.PricingModel = exports.$Enums.PricingModel = {
  FIXED: 'FIXED',
  HOURLY: 'HOURLY',
  SUBSCRIPTION: 'SUBSCRIPTION',
  TIERED: 'TIERED',
  USAGE_BASED: 'USAGE_BASED'
};

exports.Availability = exports.$Enums.Availability = {
  IMMEDIATE: 'IMMEDIATE',
  WITHIN_WEEK: 'WITHIN_WEEK',
  WITHIN_MONTH: 'WITHIN_MONTH',
  NEGOTIABLE: 'NEGOTIABLE'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  FounderProfile: 'FounderProfile',
  InvestorProfile: 'InvestorProfile',
  MemberProfile: 'MemberProfile',
  Project: 'Project',
  ProjectMember: 'ProjectMember',
  Team: 'Team',
  TeamMember: 'TeamMember',
  ProjectTeam: 'ProjectTeam',
  Investment: 'Investment',
  Request: 'Request',
  Invitation: 'Invitation',
  Review: 'Review',
  VerificationRequest: 'VerificationRequest',
  Skill: 'Skill',
  UserSkill: 'UserSkill',
  SkillEndorsement: 'SkillEndorsement',
  Interest: 'Interest',
  UserInterest: 'UserInterest',
  Connection: 'Connection',
  Message: 'Message',
  ProjectLike: 'ProjectLike',
  ProjectComment: 'ProjectComment',
  ProposalComment: 'ProposalComment',
  ProposalLike: 'ProposalLike',
  Notification: 'Notification',
  UserSettings: 'UserSettings',
  UserActivity: 'UserActivity',
  ProjectAnalytics: 'ProjectAnalytics',
  VerificationToken: 'VerificationToken',
  Proposal: 'Proposal',
  Attachment: 'Attachment',
  Budget: 'Budget',
  Location: 'Location',
  Timeline: 'Timeline',
  Contact: 'Contact',
  InvestorProposal: 'InvestorProposal',
  MentorProposal: 'MentorProposal',
  TeamProposal: 'TeamProposal',
  CoFounderProposal: 'CoFounderProposal',
  PartnerProposal: 'PartnerProposal',
  CustomerProposal: 'CustomerProposal'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
