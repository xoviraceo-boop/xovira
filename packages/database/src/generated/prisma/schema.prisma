generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  emailVerified        DateTime?             @map("email_verified")
  name                 String?
  image                String?
  password             String?
  firstName            String?               @map("first_name")
  lastName             String?               @map("last_name")
  username             String?               @unique
  avatar               String?
  bio                  String?
  phone                String?
  website              String?
  location             String?
  timezone             String?               @default("UTC")
  userType             UserType              @default(FOUNDER) @map("user_type")
  isActive             Boolean               @default(true) @map("is_active")
  isVerified           Boolean               @default(false) @map("is_verified")
  onboardingCompleted  Boolean               @default(false) @map("onboarding_completed")
  onboardingStep       Int                   @default(0) @map("onboarding_step")
  credibilityScore     Float                 @default(0) @map("credibility_score")
  verificationLevel    VerificationLevel     @default(UNVERIFIED) @map("verification_level")
  isKycVerified        Boolean               @default(false) @map("is_kyc_verified")
  kycDocuments         String[]              @map("kyc_documents")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  lastActiveAt         DateTime?             @map("last_active_at")
  accounts             Account[]
  activityLogs         ActivityLog[]
  receivedConnections  Connection[]          @relation("ConnectionReceiver")
  connections          Connection[]          @relation("ConnectionRequester")
  founderProfile       FounderProfile?
  investments          Investment[]
  investorProfile      InvestorProfile?
  receivedInvitations  Invitation[]          @relation("InvitationReceiver")
  sentInvitations      Invitation[]          @relation("InvitationSender")
  memberProfile        MemberProfile?
  receivedMessages     Message[]             @relation("MessageReceiver")
  sentMessages         Message[]             @relation("MessageSender")
  notifications        Notification[]
  postCommentVotes     PostCommentVote[]
  postComments         PostComment[]
  postLikes            PostLike[]
  postShares           PostShare[]
  posts                Post[]
  projectComments      ProjectComment[]
  projectLikes         ProjectLike[]
  participatedProjects ProjectMember[]
  ownedProjects        Project[]             @relation("ProjectOwner")
  proposalComments     ProposalComment[]
  proposalLikes        ProposalLike[]
  proposals            Proposal[]
  receivedRequests     Request[]             @relation("RequestReceiver")
  sentRequests         Request[]             @relation("RequestSender")
  givenReviews         Review[]              @relation("ReviewGiver")
  receivedReviews      Review[]              @relation("ReviewReceiver")
  sessions             Session[]
  skillEndorsements    SkillEndorsement[]    @relation("SkillEndorser")
  teamMemberships      TeamMember[]          @relation("TeamMemberUser")
  ownedTeams           Team[]                @relation("TeamOwner")
  activities           UserActivity[]
  interests            UserInterest[]
  settings             UserSettings?
  skills               UserSkill[]
  verificationRequests VerificationRequest[]

  transfersFrom       ProjectOwnershipTransfer[] @relation("TransferFrom")
  transfersTo         ProjectOwnershipTransfer[] @relation("TransferTo")
  blockedFromProjects ProjectBlockedMember[]     @relation("BlockedUser")
  blockedUsers        ProjectBlockedMember[]     @relation("BlockerUser")

  subscriptions   Subscription[]   @relation("userSubscriptions")
  creditPurchases CreditPurchase[] @relation("userCreditPurchases")

  payments Payment[] @relation("userPayments")

  discounts  DiscountToUser[]  @relation("userDiscounts")
  promotions PromotionToUser[] @relation("userPromotions")

  usages Usage[]    @relation("userUsages")
  quota  UserQuota?

  @@map("users")
}

model FounderProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique @map("user_id")
  companyExperience   Int?     @map("company_experience")
  previousExits       String[] @map("previous_exits")
  linkedinProfile     String?  @map("linkedin_profile")
  industryPreferences String[] @map("industry_preferences")
  locationPreferences String[] @map("location_preferences")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("founder_profiles")
}

model InvestorProfile {
  id                  String         @id @default(cuid())
  userId              String         @unique @map("user_id")
  investorType        InvestorType   @map("investor_type")
  firmName            String?        @map("firm_name")
  investmentRange     String?        @map("investment_range")
  minInvestment       Float?         @map("min_investment")
  maxInvestment       Float?         @map("max_investment")
  preferredStages     ProjectStage[] @map("preferred_stages")
  preferredIndustries String[]       @map("preferred_industries")
  geographicFocus     String[]       @map("geographic_focus")
  investmentThesis    String?        @map("investment_thesis")
  valueAddServices    String[]       @map("value_add_services")
  portfolioSize       Int?           @default(0) @map("portfolio_size")
  successfulExits     Int?           @default(0) @map("successful_exits")
  averageCheckSize    Float?         @map("average_check_size")
  isAccredited        Boolean        @default(false) @map("is_accredited")
  accreditationProof  String?        @map("accreditation_proof")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investor_profiles")
}

model MemberProfile {
  id                  String           @id @default(cuid())
  userId              String           @unique @map("user_id")
  jobTitle            String?          @map("job_title")
  experience          Int?
  currentSalary       Float?           @map("current_salary")
  salaryExpectation   Float?           @map("salary_expectation")
  availabilityType    AvailabilityType @default(FULL_TIME) @map("availability_type")
  hoursPerWeek        Int?             @map("hours_per_week")
  startDate           DateTime?        @map("start_date")
  acceptsEquity       Boolean          @default(true) @map("accepts_equity")
  acceptsCash         Boolean          @default(true) @map("accepts_cash")
  acceptsDeferred     Boolean          @default(false) @map("accepts_deferred")
  minEquityPercentage Float?           @map("min_equity_percentage")
  remotePreference    RemotePreference @default(HYBRID) @map("remote_preference")
  rolePreferences     String[]         @map("role_preferences")
  industryPreferences String[]         @map("industry_preferences")
  portfolioUrl        String?          @map("portfolio_url")
  linkedinUrl         String?          @map("linkedin_url")
  githubUrl           String?          @map("github_url")
  achievements        String[]
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member_profiles")
}

model Project {
  id               String        @id @default(cuid())
  ownerId          String        @map("owner_id")
  previousOwnerId  String?       @map("previous_owner_id") // Track ownership history
  name             String
  description      String
  tagline          String?
  logo             String?
  website          String?
  stage            ProjectStage?
  industry         String[]
  tags             String[]
  revenueModel     String[]      @map("revenue_model")
  targetMarket     String?       @map("target_market")
  competitiveEdge  String?       @map("competitive_edge")
  fundingGoal      Float?        @map("funding_goal")
  fundingRaised    Float?        @default(0) @map("funding_raised")
  valuationCap     Float?        @map("valuation_cap")
  teamSize         Int           @default(1) @map("team_size")
  isHiring         Boolean       @default(false) @map("is_hiring")
  status           ProjectStatus @default(DRAFT)
  isActive         Boolean       @default(true) @map("is_active")
  isPublic         Boolean       @default(true) @map("is_public")
  isFeatured       Boolean       @default(false) @map("is_featured")
  location         String?
  isRemoteFriendly Boolean       @default(true) @map("is_remote_friendly")
  viewCount        Int           @default(0) @map("view_count")
  likeCount        Int           @default(0) @map("like_count")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  launchedAt       DateTime?     @map("launched_at")
  transferredAt    DateTime?     @map("transferred_at") // Track when ownership was transferred

  activityLogs       ActivityLog[]
  attachments        Attachment[]               @relation("ProjectAttachments")
  investments        Investment[]
  invitations        Invitation[]
  posts              Post[]
  analytics          ProjectAnalytics[]
  comments           ProjectComment[]
  likes              ProjectLike[]
  members            ProjectMember[]
  teams              ProjectTeam[]
  owner              User                       @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  proposals          Proposal[]
  requests           Request[]
  reviews            Review[]
  ownershipTransfers ProjectOwnershipTransfer[] // Track all transfers
  blockedMembers     ProjectBlockedMember[] // Track blocked members

  @@map("projects")
}

model ProjectMember {
  id                 String           @id @default(cuid())
  projectId          String           @map("project_id")
  userId             String           @map("user_id")
  role               String
  title              String?
  permissions        Permission[]
  isCoFounder        Boolean          @default(false) @map("is_cofounder")
  isInvestor         Boolean          @default(false) @map("is_investor")
  isMember           Boolean          @default(false) @map("is_member")
  compensationType   CompensationType @map("compensation_type")
  salaryAmount       Float?           @map("salary_amount")
  equityPercentage   Float?           @map("equity_percentage")
  profitSharePercent Float?           @map("profit_share_percent")
  status             MemberStatus     @default(ACTIVE)

  // Member restrictions
  canPost        Boolean   @default(true) @map("can_post")
  canComment     Boolean   @default(true) @map("can_comment")
  canViewProject Boolean   @default(true) @map("can_view_project")
  isBlocked      Boolean   @default(false) @map("is_blocked")
  blockedAt      DateTime? @map("blocked_at")
  blockedBy      String?   @map("blocked_by") // User ID who blocked
  blockReason    String?   @map("block_reason")

  joinedAt DateTime  @default(now()) @map("joined_at")
  leftAt   DateTime? @map("left_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([isBlocked])
  @@index([status])
  @@map("project_members")
}

// New model to track project ownership transfers
model ProjectOwnershipTransfer {
  id          String         @id @default(cuid())
  projectId   String         @map("project_id")
  fromOwnerId String         @map("from_owner_id")
  toOwnerId   String         @map("to_owner_id")
  reason      String? // Optional reason for transfer
  notes       String? // Additional notes
  status      TransferStatus @default(PENDING)

  // Transfer request details
  requestedAt DateTime  @default(now()) @map("requested_at")
  acceptedAt  DateTime? @map("accepted_at")
  rejectedAt  DateTime? @map("rejected_at")
  completedAt DateTime? @map("completed_at")

  // Optional: Require new owner acceptance
  requiresAcceptance Boolean   @default(true) @map("requires_acceptance")
  acceptanceToken    String?   @unique @map("acceptance_token")
  expiresAt          DateTime? @map("expires_at")

  metadata Json?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fromOwner User    @relation("TransferFrom", fields: [fromOwnerId], references: [id])
  toOwner   User    @relation("TransferTo", fields: [toOwnerId], references: [id])

  @@index([projectId])
  @@index([fromOwnerId])
  @@index([toOwnerId])
  @@index([status])
  @@map("project_ownership_transfers")
}

// Track blocked members separately for audit trail
model ProjectBlockedMember {
  id        String  @id @default(cuid())
  projectId String  @map("project_id")
  userId    String  @map("user_id")
  blockedBy String  @map("blocked_by")
  reason    String?
  notes     String?

  // What they're blocked from
  blockPost    Boolean @default(true) @map("block_post")
  blockComment Boolean @default(true) @map("block_comment")
  blockView    Boolean @default(false) @map("block_view")

  blockedAt   DateTime  @default(now()) @map("blocked_at")
  unblockedAt DateTime? @map("unblocked_at")
  unblockedBy String?   @map("unblocked_by")
  isActive    Boolean   @default(true) @map("is_active")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation("BlockedUser", fields: [userId], references: [id], onDelete: Cascade)
  blocker User    @relation("BlockerUser", fields: [blockedBy], references: [id])

  @@unique([projectId, userId, isActive])
  @@index([projectId])
  @@index([userId])
  @@index([isActive])
  @@map("project_blocked_members")
}

model Post {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  userId       String         @map("user_id")
  content      String
  type         PostType       @default(UPDATE)
  projectId    String?        @map("project_id")
  teamId       String?        @map("team_id")
  attachments  String[]
  visibility   PostVisibility @default(PUBLIC)
  isPinned     Boolean        @default(false) @map("is_pinned")
  isEdited     Boolean        @default(false) @map("is_edited")
  likeCount    Int            @default(0) @map("like_count")
  commentCount Int            @default(0) @map("comment_count")
  shareCount   Int            @default(0) @map("share_count")
  viewCount    Int            @default(0) @map("view_count")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  editedAt     DateTime?      @map("edited_at")
  comments     PostComment[]
  likes        PostLike[]
  shares       PostShare[]
  project      Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team         Team?          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([teamId])
  @@index([createdAt])
  @@index([visibility, createdAt])
  @@map("posts")
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
  @@map("post_likes")
}

model PostComment {
  id        String            @id @default(cuid())
  postId    String            @map("post_id")
  userId    String            @map("user_id")
  parentId  String?           @map("parent_id")
  content   String
  upvotes   Int               @default(0)
  downvotes Int               @default(0)
  isEdited  Boolean           @default(false) @map("is_edited")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  editedAt  DateTime?         @map("edited_at")
  votes     PostCommentVote[]
  parent    PostComment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   PostComment[]     @relation("CommentReplies")
  post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@map("post_comments")
}

model PostCommentVote {
  id        String      @id @default(cuid())
  commentId String      @map("comment_id")
  userId    String      @map("user_id")
  voteType  VoteType    @map("vote_type")
  createdAt DateTime    @default(now()) @map("created_at")
  comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
  @@map("post_comment_votes")
}

model PostShare {
  id        String    @id @default(cuid())
  postId    String    @map("post_id")
  userId    String    @map("user_id")
  comment   String?
  shareType ShareType @default(INTERNAL) @map("share_type")
  createdAt DateTime  @default(now()) @map("created_at")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@map("post_shares")
}

model ActivityLog {
  id          String        @id @default(cuid())
  userId      String?       @map("user_id")
  actorType   ActorType     @default(USER) @map("actor_type")
  action      LogAction
  category    LogCategory
  severity    LogSeverity   @default(INFO)
  entityType  String?       @map("entity_type")
  entityId    String?       @map("entity_id")
  projectId   String?       @map("project_id")
  teamId      String?       @map("team_id")
  title       String        @db.VarChar(200)
  description String?
  metadata    Json?
  oldValue    Json?         @map("old_value")
  newValue    Json?         @map("new_value")
  ipAddress   String?       @map("ip_address")
  userAgent   String?       @map("user_agent")
  visibility  LogVisibility @default(PRIVATE)
  isRead      Boolean       @default(false) @map("is_read")
  createdAt   DateTime      @default(now()) @map("created_at")
  project     Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team        Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([teamId])
  @@index([action, category])
  @@index([createdAt])
  @@index([entityType, entityId])
  @@map("activity_logs")
}

model Team {
  id           String        @id @default(cuid())
  ownerId      String        @map("owner_id")
  name         String
  description  String
  avatar       String?
  teamType     TeamType
  industry     String[]
  skills       String[]
  status       TeamStatus    @default(DRAFT)
  isActive     Boolean       @default(true) @map("is_active")
  isHiring     Boolean       @default(false) @map("is_hiring")
  size         Int           @default(1)
  maxSize      Int?          @map("max_size")
  location     String?
  isRemote     Boolean       @default(true) @map("is_remote")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  activityLogs ActivityLog[]
  attachments  Attachment[]  @relation("TeamAttachments")
  invitations  Invitation[]
  posts        Post[]
  projects     ProjectTeam[]
  Requests     Request[]
  reviews      Review[]
  members      TeamMember[]  @relation("TeamMemberTeam")
  owner        User          @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("teams")
}

model TeamMember {
  id               String            @id @default(cuid())
  teamId           String            @map("team_id")
  userId           String            @map("user_id")
  role             String
  title            String?
  status           MemberStatus      @default(ACTIVE)
  permissions      Permission[]
  compensationType CompensationType? @map("compensation_type")
  salaryAmount     Float?            @map("salary_amount")
  equityPercentage Float?            @map("equity_percentage")
  hourlyRate       Float?            @map("hourly_rate")
  joinedAt         DateTime          @default(now()) @map("joined_at")
  leftAt           DateTime?         @map("left_at")
  team             Team              @relation("TeamMemberTeam", fields: [teamId], references: [id], onDelete: Cascade)
  user             User              @relation("TeamMemberUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model ProjectTeam {
  id         String   @id @default(cuid())
  projectId  String   @map("project_id")
  teamId     String   @map("team_id")
  role       String
  status     String   @default("active")
  assignedAt DateTime @default(now()) @map("assigned_at")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([projectId, teamId])
  @@map("project_teams")
}

model Investment {
  id                    String           @id @default(cuid())
  investorId            String           @map("investor_id")
  projectId             String           @map("project_id")
  amount                Float
  investmentType        InvestmentType   @map("investment_type")
  equityPercent         Float?           @map("equity_percent")
  valuation             Float?
  liquidationPref       Float?           @default(1) @map("liquidation_pref")
  antidilution          Boolean          @default(false)
  boardSeat             Boolean          @default(false) @map("board_seat")
  status                InvestmentStatus @default(PROPOSED)
  stage                 InvestmentStage  @default(INITIAL)
  dueDiligenceCompleted Boolean          @default(false) @map("due_diligence_completed")
  legalDocsComplete     Boolean          @default(false) @map("legal_docs_complete")
  proposedAt            DateTime         @default(now()) @map("proposed_at")
  acceptedAt            DateTime?        @map("accepted_at")
  completedAt           DateTime?        @map("completed_at")
  notes                 String?
  attachments           Attachment[]     @relation("InvestmentAttachments")
  investor              User             @relation(fields: [investorId], references: [id], onDelete: Cascade)
  project               Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model Request {
  id            String            @id @default(cuid())
  senderId      String            @map("sender_id")
  receiverId    String            @map("receiver_id")
  targetType    RequestTargetType @map("target_type")
  projectId     String?           @map("project_id")
  teamId        String?           @map("team_id")
  proposalId    String?           @map("proposal_id")
  role          String?
  message       String
  proposedTerms Json?             @map("proposed_terms")
  status        RequestStatus     @default(PENDING)
  response      String?
  respondedAt   DateTime?         @map("responded_at")
  createdAt     DateTime          @default(now()) @map("created_at")
  roleApplied   RoleType?         @map("role_applied")
  project       Project?          @relation(fields: [projectId], references: [id])
  proposal      Proposal?         @relation(fields: [proposalId], references: [id])
  receiver      User              @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender        User              @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  team          Team?             @relation(fields: [teamId], references: [id])

  @@map("requests")
}

model Invitation {
  id          String            @id @default(cuid())
  senderId    String            @map("sender_id")
  receiverId  String            @map("receiver_id")
  projectId   String?           @map("project_id")
  teamId      String?           @map("team_id")
  role        String?
  message     String
  terms       Json?
  expiresAt   DateTime?         @map("expires_at")
  response    String?
  respondedAt DateTime?         @map("responded_at")
  createdAt   DateTime          @default(now()) @map("created_at")
  targetType  RequestTargetType @map("target_type")
  status      RequestStatus     @default(PENDING)
  project     Project?          @relation(fields: [projectId], references: [id])
  receiver    User              @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User              @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  team        Team?             @relation(fields: [teamId], references: [id])

  @@map("invitations")
}

model Review {
  id              String            @id @default(cuid())
  giverId         String            @map("giver_id")
  receiverId      String            @map("receiver_id")
  contextType     ReviewContextType @map("context_type")
  projectId       String?           @map("project_id")
  teamId          String?           @map("team_id")
  proposalId      String?           @map("proposal_id")
  rating          Int
  title           String?
  content         String
  workQuality     Int?              @map("work_quality")
  communication   Int?
  reliability     Int?
  leadership      Int?
  technicalSkills Int?              @map("technical_skills")
  isVerified      Boolean           @default(false) @map("is_verified")
  isPublic        Boolean           @default(true) @map("is_public")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  giver           User              @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
  project         Project?          @relation(fields: [projectId], references: [id])
  proposal        Proposal?         @relation(fields: [proposalId], references: [id])
  receiver        User              @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  team            Team?             @relation(fields: [teamId], references: [id])

  @@unique([giverId, receiverId, contextType, projectId, teamId, proposalId])
  @@map("reviews")
}

model VerificationRequest {
  id              String             @id @default(cuid())
  userId          String             @map("user_id")
  type            VerificationType
  linkedinProfile String?            @map("linkedin_profile")
  websiteUrl      String?            @map("website_url")
  companyEmail    String?            @map("company_email")
  status          VerificationStatus @default(PENDING)
  reviewedBy      String?            @map("reviewed_by")
  reviewedAt      DateTime?          @map("reviewed_at")
  rejectionReason String?            @map("rejection_reason")
  createdAt       DateTime           @default(now()) @map("created_at")
  attachments     Attachment[]       @relation("VerificationAttachments")
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_requests")
}

model Skill {
  id          String      @id @default(cuid())
  name        String      @unique
  category    String
  description String?
  userSkills  UserSkill[]

  @@map("skills")
}

model UserSkill {
  id           String             @id @default(cuid())
  userId       String             @map("user_id")
  skillId      String             @map("skill_id")
  proficiency  ProficiencyLevel
  yearsOfExp   Int?               @map("years_of_exp")
  isVerified   Boolean            @default(false) @map("is_verified")
  endorsements SkillEndorsement[]
  skill        Skill              @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
}

model SkillEndorsement {
  id          String    @id @default(cuid())
  userSkillId String    @map("user_skill_id")
  endorserId  String    @map("endorser_id")
  comment     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  endorser    User      @relation("SkillEndorser", fields: [endorserId], references: [id], onDelete: Cascade)
  userSkill   UserSkill @relation(fields: [userSkillId], references: [id], onDelete: Cascade)

  @@unique([userSkillId, endorserId])
  @@map("skill_endorsements")
}

model Interest {
  id            String         @id @default(cuid())
  name          String         @unique
  category      String
  description   String?
  userInterests UserInterest[]

  @@map("interests")
}

model UserInterest {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  interestId String   @map("interest_id")
  interest   Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, interestId])
  @@map("user_interests")
}

model Connection {
  id          String           @id @default(cuid())
  requesterId String           @map("requester_id")
  receiverId  String           @map("receiver_id")
  status      ConnectionStatus @default(PENDING)
  message     String?
  requestedAt DateTime         @default(now()) @map("requested_at")
  acceptedAt  DateTime?        @map("accepted_at")
  receiver    User             @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  requester   User             @relation("ConnectionRequester", fields: [requesterId], references: [id], onDelete: Cascade)

  @@unique([requesterId, receiverId])
  @@map("connections")
}

model Message {
  id          String    @id @default(cuid())
  senderId    String    @map("sender_id")
  receiverId  String    @map("receiver_id")
  content     String
  isRead      Boolean   @default(false) @map("is_read")
  readAt      DateTime? @map("read_at")
  attachments String[]
  createdAt   DateTime  @default(now()) @map("created_at")
  receiver    User      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ProjectLike {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  createdAt DateTime @default(now()) @map("created_at")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_likes")
}

model ProjectComment {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project_comments")
}

model ProposalComment {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  proposalId String   @map("proposal_id")
  content    String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("proposal_comments")
}

model ProposalLike {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  proposalId String   @map("proposal_id")
  createdAt  DateTime @default(now()) @map("created_at")
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, proposalId])
  @@map("proposal_likes")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String           @map("user_id")
  type        NotificationType
  title       String
  content     String
  relatedId   String?          @map("related_id")
  relatedType String?          @map("related_type")
  isRead      Boolean          @default(false) @map("is_read")
  readAt      DateTime?        @map("read_at")
  createdAt   DateTime         @default(now()) @map("created_at")
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserSettings {
  id                    String            @id @default(cuid())
  userId                String            @unique @map("user_id")
  profileVisibility     ProfileVisibility @default(PUBLIC) @map("profile_visibility")
  showEmail             Boolean           @default(false) @map("show_email")
  showPhone             Boolean           @default(false) @map("show_phone")
  allowMessages         Boolean           @default(true) @map("allow_messages")
  allowConnections      Boolean           @default(true) @map("allow_connections")
  emailNotifications    Boolean           @default(true) @map("email_notifications")
  pushNotifications     Boolean           @default(true) @map("push_notifications")
  newInvitationEmail    Boolean           @default(true) @map("new_invitation_email")
  newMessageEmail       Boolean           @default(true) @map("new_message_email")
  projectUpdateEmail    Boolean           @default(true) @map("project_update_email")
  investmentUpdateEmail Boolean           @default(true) @map("investment_update_email")
  newConnectionEmail    Boolean           @default(true) @map("new_connection_email")
  weeklyDigestEmail     Boolean           @default(true) @map("weekly_digest_email")
  marketingEmails       Boolean           @default(false) @map("marketing_emails")
  showInSearch          Boolean           @default(true) @map("show_in_search")
  showInRecommendations Boolean           @default(true) @map("show_in_recommendations")
  theme                 String            @default("system")
  language              String            @default("en")
  timezone              String            @default("UTC")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  newRequestEmail       Boolean           @default(true) @map("new_request_email")
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model UserActivity {
  id        String       @id @default(cuid())
  userId    String       @map("user_id")
  action    ActivityType
  details   Json?
  ipAddress String?      @map("ip_address")
  userAgent String?      @map("user_agent")
  createdAt DateTime     @default(now()) @map("created_at")
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model ProjectAnalytics {
  id                 String   @id @default(cuid())
  projectId          String   @map("project_id")
  viewCount          Int      @default(0) @map("view_count")
  uniqueViews        Int      @default(0) @map("unique_views")
  likeCount          Int      @default(0) @map("like_count")
  commentCount       Int      @default(0) @map("comment_count")
  shareCount         Int      @default(0) @map("share_count")
  acceptedApps       Int      @default(0) @map("accepted_apps")
  investmentRequests Int      @default(0) @map("investment_requests")
  totalFunding       Float    @default(0) @map("total_funding")
  date               DateTime @default(now())
  RequestCount       Int      @default(0) @map("request_count")
  project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, date])
  @@map("project_analytics")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Proposal {
  id              String                   @id @default(cuid())
  userId          String                   @map("user_id")
  createdBy       String                   @db.VarChar(255)
  category        ProposalType
  projectId       String?                  @map("project_id")
  teamId          String?                  @map("team_id")
  title           String                   @db.VarChar(200)
  shortSummary    String                   @db.VarChar(500)
  detailedDesc    String
  industry        String[]
  keywords        String[]
  status          ProposalStatus           @default(DRAFT)
  visibility      Visibility               @default(PUBLIC)
  featured        Boolean                  @default(false)
  views           Int                      @default(0)
  bookmarks       Int                      @default(0)
  slug            String?
  metaDescription String?                  @db.VarChar(160)
  tags            String[]
  language        String                   @default("en") @db.VarChar(5)
  currency        String                   @default("USD") @db.VarChar(3)
  timezone        String?                  @db.VarChar(50)
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @updatedAt @map("updated_at")
  expiresAt       DateTime?
  metadata        Json?
  searchVector    Unsupported("tsvector")?
  intent          ProposalIntent
  attachments     Attachment[]
  budget          Budget?
  cofounder       CoFounderProposal?
  contact         Contact?
  customer        CustomerProposal?
  investor        InvestorProposal?
  location        Location?
  mentor          MentorProposal?
  partner         PartnerProposal?
  membership      MembershipProposal? // New relation
  comments        ProposalComment[]
  likes           ProposalLike[]
  project         Project?                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Requests        Request[]
  reviews         Review[]
  team            TeamProposal?
  timeline        Timeline?

  @@index([userId])
  @@index([projectId])
  @@index([teamId])
  @@index([category, intent, status, createdAt])
  @@index([industry])
  @@index([slug])
  @@map("proposals")
}

model Attachment {
  id                    String               @id @default(cuid())
  proposalId            String?              @map("proposal_id")
  projectId             String?              @map("project_id")
  teamId                String?              @map("team_id")
  investmentId          String?              @map("investment_id")
  verificationRequestId String?              @map("verification_request_id")
  filename              String               @db.VarChar(255)
  url                   String
  mimeType              String               @db.VarChar(100)
  size                  Int
  type                  AttachmentType
  description           String?              @db.VarChar(500)
  language              String?              @db.VarChar(5)
  version               Int                  @default(1)
  isPrimary             Boolean              @default(false)
  checksum              String?              @db.VarChar(64)
  views                 Int                  @default(0)
  downloads             Int                  @default(0)
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")
  investment            Investment?          @relation("InvestmentAttachments", fields: [investmentId], references: [id], onDelete: Cascade)
  project               Project?             @relation("ProjectAttachments", fields: [projectId], references: [id], onDelete: Cascade)
  proposal              Proposal?            @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  team                  Team?                @relation("TeamAttachments", fields: [teamId], references: [id], onDelete: Cascade)
  verificationRequest   VerificationRequest? @relation("VerificationAttachments", fields: [verificationRequestId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@index([type])
  @@map("attachments")
}

model Budget {
  id          String   @id @default(cuid())
  minAmount   Float?
  maxAmount   Float?
  currency    String   @default("USD") @db.VarChar(3)
  description String?
  proposalId  String   @unique @map("proposal_id")
  proposal    Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Location {
  id           String   @id @default(cuid())
  country      String   @db.VarChar(100)
  countryCode  String   @db.VarChar(2)
  region       String?  @db.VarChar(100)
  city         String?  @db.VarChar(100)
  remote       Boolean  @default(false)
  hybrid       Boolean  @default(false)
  willRelocate Boolean  @default(false)
  timeZones    String[]
  proposalId   String   @unique @map("proposal_id")
  proposal     Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("locations")
}

model Timeline {
  id           String     @id @default(cuid())
  startDate    DateTime?
  endDate      DateTime?
  duration     String?
  commitment   Commitment
  availability String?
  urgency      Urgency    @default(MEDIUM)
  proposalId   String     @unique @map("proposal_id")
  proposal     Proposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("timelines")
}

model Contact {
  id               String        @id @default(cuid())
  name             String        @db.VarChar(100)
  email            String        @db.VarChar(255)
  phone            String?       @db.VarChar(20)
  website          String?       @db.VarChar(255)
  linkedin         String?       @db.VarChar(255)
  twitter          String?       @db.VarChar(255)
  github           String?       @db.VarChar(255)
  telegram         String?       @db.VarChar(100)
  discord          String?       @db.VarChar(100)
  preferredContact ContactMethod @default(EMAIL) @map("preferred_contact")
  publicProfile    Boolean       @default(true) @map("public_profile")
  proposalId       String        @unique @map("proposal_id")
  proposal         Proposal      @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model MembershipProposal {
  id                String              @id @default(cuid())
  seekingOrOffering MembershipDirection @map("seeking_or_offering")
  roleTitle         String              @map("role_title") @db.VarChar(100)
  department        String?             @db.VarChar(50)
  customRole        String?             @map("custom_role") @db.VarChar(100) // For non-standard roles

  // Role details
  keyResponsibilities String[]        @map("key_responsibilities")
  requiredSkills      String[]        @map("required_skills")
  preferredSkills     String[]        @map("preferred_skills")
  experienceLevel     SeniorityLevel? @map("experience_level")
  yearsExperience     Int?            @map("years_experience")

  // Compensation
  compensationType CompensationType? @map("compensation_type")
  salaryRange      Json?             @map("salary_range")
  equityRange      Json?             @map("equity_range")
  benefits         String[]

  // Commitment
  timeCommitment Commitment? @map("time_commitment")
  hoursPerWeek   Int?        @map("hours_per_week")
  startDate      DateTime?   @map("start_date")
  duration       String? // e.g., "6 months", "1 year", "indefinite"

  // Work arrangement
  workArrangement WorkArrangement @default(HYBRID) @map("work_arrangement")

  // What's offered/expected
  whatOffered  String? @map("what_offered") // What the member brings
  whatExpected String? @map("what_expected") // What they expect from project

  // Project/Company info (for offering side)
  projectStage  StartupStage? @map("project_stage")
  teamSize      Int?          @map("team_size")
  companyValues String[]      @map("company_values")
  teamCulture   String?       @map("team_culture")

  // Member profile (for seeking side)
  currentPosition String?       @map("current_position")
  portfolioUrl    String?       @map("portfolio_url")
  availability    Availability?

  // Permissions offered
  permissions       Permission[]
  decisionAuthority String[]     @map("decision_authority")

  proposalId String   @unique @map("proposal_id")
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("membership_proposals")
}

model InvestorProposal {
  id               String         @id @default(cuid())
  fundingNeeded    Float?         @map("funding_needed")
  fundingType      FundingType?   @map("funding_type")
  stage            StartupStage?  @map("startup_stage")
  currentRevenue   Float?         @map("current_revenue")
  projectedRevenue Float?         @map("projected_revenue")
  customers        Int?
  monthlyUsers     Int?           @map("monthly_users")
  growthRate       Float?         @map("growth_rate")
  useOfFunds       String?        @map("use_of_funds")
  keyMetrics       Json?          @map("key_metrics")
  teamSize         Int?           @map("team_size")
  foundedDate      DateTime?      @map("founded_date")
  previousFunding  Float?         @map("previous_funding")
  equityOffered    Float?         @map("equity_offered")
  boardSeat        Boolean        @default(false) @map("board_seat")
  expectedROI      Float?         @map("expected_roi")
  exitStrategy     String?        @map("exit_strategy")
  minInvestment    Float?         @map("min_investment")
  maxInvestment    Float?         @map("max_investment")
  investorKind     InvestorKind[] @map("investor_kind")
  proposalId       String         @unique @map("proposal_id")
  proposal         Proposal       @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("investor_proposals")
}

model MentorProposal {
  id                 String             @id @default(cuid())
  seekingOrOffering  MentorDirection    @map("seeking_or_offering")
  guidanceAreas      String[]           @map("guidance_areas")
  specificChallenges String?            @map("specific_challenges")
  currentStage       StartupStage?      @map("current_stage")
  preferredMentorBg  String[]           @map("preferred_mentor_bg")
  expertiseAreas     String[]           @map("expertise_areas")
  yearsExperience    Int?               @map("years_experience")
  industriesServed   String[]           @map("industries_served")
  successStories     String?            @map("success_stories")
  menteesCriteria    String?            @map("mentees_criteria")
  preferredEngage    EngagementType?    @map("preferred_engage")
  sessionFrequency   String?            @map("session_frequency")
  compensationExp    MentorCompensation @default(FREE) @map("compensation_exp")
  proposalId         String             @unique @map("proposal_id")
  proposal           Proposal           @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("mentor_proposals")
}

model TeamProposal {
  id                String            @id @default(cuid())
  hiringOrSeeking   TeamDirection     @map("hiring_or_seeking")
  roleTitle         String            @map("role_title") @db.VarChar(100)
  department        String?           @db.VarChar(50)
  seniority         SeniorityLevel?   @map("seniority_level")
  mustHaveSkills    String[]          @map("must_have_skills")
  niceToHaveSkills  String[]          @map("nice_to_have_skills")
  certifications    String[]
  languagesRequired String[]          @map("languages_required")
  workArrangement   WorkArrangement   @default(HYBRID) @map("work_arrangement")
  compensation      CompensationType? @map("compensation_type")
  salaryRange       Json?             @map("salary_range")
  benefits          String[]
  companySize       CompanySize?      @map("company_size")
  companyStage      StartupStage?     @map("company_stage")
  teamCulture       String?           @map("team_culture")
  proposalId        String            @unique @map("proposal_id")
  proposal          Proposal          @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("team_proposals")
}

model CoFounderProposal {
  id                  String             @id @default(cuid())
  seekingOrOffering   CofounderDirection @map("seeking_or_offering")
  roleTitle           String             @map("role_title") @db.VarChar(100)
  keyResponsibilities String[]           @map("key_responsibilities")
  decisionAreas       String[]           @map("decision_areas")
  equityOffered       Float?             @map("equity_offered")
  equityExpected      Float?             @map("equity_expected")
  vestingSchedule     String?            @map("vesting_schedule")
  timeCommitment      String             @map("time_commitment")
  requiredSkills      String[]           @map("required_skills")
  preferredBackground String[]           @map("preferred_background")
  mustHaveExperience  String[]           @map("must_have_experience")
  personalityTraits   String[]           @map("personality_traits")
  businessStage       StartupStage?      @map("business_stage")
  currentTeamSize     Int?               @map("current_team_size")
  businessModel       String?            @map("business_model")
  targetMarket        String?            @map("target_market")
  workStyle           String?            @map("work_style")
  companyValues       String[]           @map("company_values")
  conflictResolution  String?            @map("conflict_resolution")
  proposalId          String             @unique @map("proposal_id")
  proposal            Proposal           @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("cofounder_proposals")
}

model PartnerProposal {
  id                  String               @id @default(cuid())
  seekingOrOffering   PartnerDirection     @map("seeking_or_offering")
  partnershipType     PartnershipType      @map("partnership_type")
  valueOffered        String               @map("value_offered")
  valueExpected       String               @map("value_expected")
  mutualBenefits      String[]             @map("mutual_benefits")
  partnershipModel    PartnershipModel?    @map("partnership_model")
  revenueSharing      Float?               @map("revenue_sharing")
  exclusivity         ExclusivityType      @default(NON_EXCLUSIVE)
  duration            PartnershipDuration? @map("partnership_duration")
  partnerCriteria     String?              @map("partner_criteria")
  minimumRequirements String[]             @map("minimum_requirements")
  idealPartnerProfile String?              @map("ideal_partner_profile")
  currentPartners     Int?                 @map("current_partners")
  marketReach         String[]             @map("market_reach")
  customerBase        Int?                 @map("customer_base")
  annualRevenue       Float?               @map("annual_revenue")
  proposalId          String               @unique @map("proposal_id")
  proposal            Proposal             @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("partner_proposals")
}

model CustomerProposal {
  id                String            @id @default(cuid())
  sellingOrBuying   CustomerDirection @map("selling_or_buying")
  productService    String            @map("product_service") @db.VarChar(200)
  category          String?           @db.VarChar(100)
  description       String
  pricingModel      PricingModel?     @map("pricing_model")
  priceRange        Json?             @map("price_range")
  availability      Availability?
  deliveryTime      String?           @map("delivery_time")
  targetAudience    String?           @map("target_audience")
  customerBenefits  String[]          @map("customer_benefits")
  uniqueSellingProp String?           @map("unique_selling_prop")
  requirements      String[]
  budgetRange       Json?             @map("budget_range")
  decisionCriteria  String[]          @map("decision_criteria")
  timeframe         String?
  marketSize        String?           @map("market_size")
  competitors       String[]
  previousClients   Int?              @map("previous_clients")
  testimonials      String?
  supportIncluded   String[]          @map("support_included")
  warrantyTerms     String?           @map("warranty_terms")
  paymentTerms      String?           @map("payment_terms") @db.VarChar(100)
  proposalId        String            @unique @map("proposal_id")
  proposal          Proposal          @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("customer_proposals")
}

// ============================================
// SUBSCRIPTION & BILLING MODELS
// ============================================

model Plan {
  id            String        @id @default(cuid())
  name          String        @unique
  displayName   String        @map("display_name")
  description   String?
  slug          String        @unique
  planType      PlanType      @map("plan_type")
  billingPeriod BillingPeriod @map("billing_period")
  price         Float
  currency      String        @default("USD") @db.VarChar(3)
  trialDays     Int           @default(0) @map("trial_days")
  isActive      Boolean       @default(true) @map("is_active")
  isFeatured    Boolean       @default(false) @map("is_featured")
  sortOrder     Int           @default(0) @map("sort_order")
  cappedAmount  Int?
  creditAmount  Int?

  stripePriceId String? @unique @map("stripe_price_id")
  paypalPlanId  String? @unique @map("paypal_plan_id")

  // Relations
  feature       Feature?          @relation("planFeature")
  subscriptions Subscription[]    @relation("planSubscriptions")
  discounts     DiscountToPlan[]  @relation("planDiscounts")
  promotions    PromotionToPlan[] @relation("planPromotions")

  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("plans")
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String             @map("user_id")
  planId             String             @map("plan_id")
  subId              String?            @unique @map("sub_id")
  status             SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime           @map("current_period_start")
  currentPeriodEnd   DateTime           @map("current_period_end")
  cancelAtPeriodEnd  Boolean            @default(false) @map("cancel_at_period_end")
  cancelReason       String?
  canceledAt         DateTime?          @map("canceled_at")
  endedAt            DateTime?          @map("ended_at")
  trialStart         DateTime?          @map("trial_start")
  trialEnd           DateTime?          @map("trial_end")
  metadata           Json?
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")

  // Relations
  user          User           @relation("userSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  plan          Plan           @relation("planSubscriptions", fields: [planId], references: [id], onDelete: Cascade)
  payments      Payment[]      @relation("subscriptionPayment")
  billingEvents BillingEvent[] @relation("subscriptionBillingEvents")
  usage         Usage?         @relation("subscriptionUsage")

  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

model CreditPackage {
  id           String      @id @default(cuid())
  name         String      @unique
  displayName  String      @map("display_name")
  packageType  PackageType @map("package_type")
  description  String?
  creditAmount Int         @map("credit_amount")
  price        Float
  currency     String      @default("USD") @db.VarChar(3)
  bonusCredits Int         @default(0) @map("bonus_credits")
  isActive     Boolean     @default(true) @map("is_active")
  isFeatured   Boolean     @default(false) @map("is_featured")
  sortOrder    Int         @default(0) @map("sort_order")
  validityDays Int?        @map("validity_days")

  // Relations
  feature    Feature?             @relation("packageFeature")
  discounts  DiscountToPackage[]  @relation("packageDiscounts")
  promotions PromotionToPackage[] @relation("packagePromotions")
  purchases  CreditPurchase[]     @relation("packagePurchases")

  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("credit_packages")
}

model CreditPurchase {
  id           String         @id @default(cuid())
  userId       String         @map("user_id")
  packageId    String         @map("package_id")
  orderId      String?        @unique @map("order_id")
  creditAmount Int            @map("credit_amount")
  bonusCredits Int            @default(0) @map("bonus_credits")
  totalCredits Int            @map("total_credits")
  price        Float
  currency     String         @default("USD") @db.VarChar(3)
  status       PurchaseStatus @default(ACTIVE)
  expiresAt    DateTime?      @map("expires_at")
  purchasedAt  DateTime       @default(now()) @map("purchased_at")
  metadata     Json?

  // Relations
  user          User           @relation("userCreditPurchases", fields: [userId], references: [id], onDelete: Cascade)
  package       CreditPackage  @relation("packagePurchases", fields: [packageId], references: [id], onDelete: Cascade)
  payment       Payment?       @relation("purchasePayment")
  billingEvents BillingEvent[] @relation("purchaseBillingEvents")
  usage         Usage?         @relation("purchaseUsage")

  @@index([userId])
  @@map("credit_purchases")
}

model Feature {
  id           String   @id @default(cuid())
  name         String
  description  String[]
  maxProjects  Int      @default(0) @map("max_projects")
  maxTeams     Int      @default(0) @map("max_teams")
  maxProposals Int      @default(0) @map("max_proposals")
  maxRequests  Int      @default(0) @map("max_requests")
  maxStorageGB Float    @default(0) @map("max_storage_gb")
  maxCredits   Int      @default(0) @map("max_credits")

  // Relations
  planId    String?        @unique @map("plan_id")
  plan      Plan?          @relation("planFeature", fields: [planId], references: [id], onDelete: Cascade)
  packageId String?        @unique @map("package_id")
  package   CreditPackage? @relation("packageFeature", fields: [packageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("features")
}

model Payment {
  id             String  @id @default(cuid())
  subscriptionId String? @unique @map("subscription_id")
  purchaseId     String? @unique @map("purchase_id")
  userId         String  @map("user_id")

  billingType    BillingType
  amount         Float
  adjustedAmount Float?

  billingPeriodStart DateTime?
  billingPeriodEnd   DateTime?

  currency      String        @default("USD") @db.VarChar(3)
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod @map("payment_method")

  paymentGateway PaymentGateway? @map("payment_gateway")

  failureReason String? @map("failure_reason")
  receiptUrl    String? @map("receipt_url")

  refundId     String?
  refundReason String?

  intentId String?
  chargeId String?

  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")
  processedAt DateTime? @map("processed_at")

  // Relations
  user         User            @relation("userPayments", fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription?   @relation("subscriptionPayment", fields: [subscriptionId], references: [id], onDelete: Cascade)
  purchase     CreditPurchase? @relation("purchasePayment", fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([subscriptionId])
  @@index([purchaseId])
  @@map("payments")
}

model BillingEvent {
  id               String             @id @default(cuid())
  subscriptionId   String?
  creditPurchaseId String?
  type             BillingEventType
  amount           Float
  description      String?
  startDate        DateTime           @default(now())
  endDate          DateTime?
  promotionId      String?
  discountId       String?
  status           BillingEventStatus @default(PENDING)
  appliedAmount    Float?
  failureReason    String?
  metadata         Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  creditPurchase   CreditPurchase?    @relation("purchaseBillingEvents", fields: [creditPurchaseId], references: [id])
  discount         Discount?          @relation("discountBillingEvents", fields: [discountId], references: [id])
  promotion        Promotion?         @relation("promotionBillingEvents", fields: [promotionId], references: [id])
  subscription     Subscription?      @relation("subscriptionBillingEvents", fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
  @@index([creditPurchaseId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("billing_events")
}

model Promotion {
  id            String               @id @default(cuid())
  code          String
  name          String
  description   String?
  type          PromotionType
  value         Float
  unit          PromotionUnit
  validFrom     DateTime             @default(now())
  validUntil    DateTime?
  maxUses       Int?
  usedCount     Int                  @default(0)
  isActive      Boolean              @default(true)
  appliedToAll  Boolean              @default(false)
  metadata      Json?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  billingEvents BillingEvent[]       @relation("promotionBillingEvents")
  packages      PromotionToPackage[] @relation("promotionPackages")
  plans         PromotionToPlan[]    @relation("promotionPlans")
  users         PromotionToUser[]    @relation("promotionUsers")

  @@index([isActive])
  @@index([validFrom, validUntil])
  @@map("promotion")
}

model Discount {
  id            String              @id @default(cuid())
  code          String
  name          String
  description   String?
  type          DiscountType
  value         Float
  unit          DiscountUnit
  validFrom     DateTime            @default(now())
  validUntil    DateTime?
  maxUses       Int?
  usedCount     Int                 @default(0)
  isActive      Boolean             @default(true)
  appliedToAll  Boolean             @default(false)
  minimumAmount Float?
  maximumAmount Float?
  metadata      Json?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  billingEvents BillingEvent[]      @relation("discountBillingEvents")
  packages      DiscountToPackage[] @relation("discountPackages")
  plans         DiscountToPlan[]    @relation("discountPlans")
  users         DiscountToUser[]    @relation("discountUsers")

  @@index([isActive])
  @@index([validFrom, validUntil])
  @@map("discount")
}

model DiscountToPlan {
  discountId String
  planId     String
  discount   Discount @relation("discountPlans", fields: [discountId], references: [id], onDelete: Cascade)
  plan       Plan     @relation("planDiscounts", fields: [planId], references: [id], onDelete: Cascade)

  @@id([discountId, planId])
  @@index([planId])
  @@map("discount_to_plan")
}

model DiscountToPackage {
  discountId    String
  packageId     String
  discount      Discount      @relation("discountPackages", fields: [discountId], references: [id], onDelete: Cascade)
  creditPackage CreditPackage @relation("packageDiscounts", fields: [packageId], references: [id], onDelete: Cascade)

  @@id([discountId, packageId])
  @@index([packageId])
  @@map("discount_to_package")
}

model DiscountToUser {
  discountId String
  userId     String
  discount   Discount @relation("discountUsers", fields: [discountId], references: [id], onDelete: Cascade)
  user       User     @relation("userDiscounts", fields: [userId], references: [id], onDelete: Cascade)

  @@id([discountId, userId])
  @@index([userId])
  @@map("discount_to_user")
}

model PromotionToUser {
  promotionId String
  userId      String
  promotion   Promotion @relation("promotionUsers", fields: [promotionId], references: [id], onDelete: Cascade)
  user        User      @relation("userPromotions", fields: [userId], references: [id], onDelete: Cascade)

  @@id([promotionId, userId])
  @@index([userId])
  @@map("promotion_to_user")
}

model PromotionToPlan {
  promotionId String
  planId      String
  plan        Plan      @relation("planPromotions", fields: [planId], references: [id], onDelete: Cascade)
  promotion   Promotion @relation("promotionPlans", fields: [promotionId], references: [id], onDelete: Cascade)

  @@id([promotionId, planId])
  @@index([planId])
  @@map("promotion_to_plan")
}

model PromotionToPackage {
  promotionId   String
  packageId     String
  creditPackage CreditPackage @relation("packagePromotions", fields: [packageId], references: [id], onDelete: Cascade)
  promotion     Promotion     @relation("promotionPackages", fields: [promotionId], references: [id], onDelete: Cascade)

  @@id([promotionId, packageId])
  @@index([packageId])
  @@map("promotion_to_package")
}

// ============================================
// USAGE TRACKING & QUOTA MANAGEMENT
// ============================================

model Usage {
  id               String   @id @default(cuid())
  userId           String
  subscriptionId   String?  @unique @map("subscription_id")
  creditPurchaseId String?  @unique @map("credit_purchase_id")
  date             DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  metadata         Json?

  maxProjects        Int   @default(0) @map("max_projects")
  remainingProjects  Int   @default(0) @map("remaining_projects")
  maxTeams           Int   @default(0) @map("max_teams")
  remainingTeams     Int   @default(0) @map("remaining_teams")
  maxProposals       Int   @default(0) @map("max_proposals")
  remainingProposals Int   @default(0) @map("remaining_proposals")
  maxRequests        Int   @default(0) @map("max_requests")
  remainingRequests  Int   @default(0) @map("remaining_requests")
  maxStorageGB       Float @default(0) @map("max_storage_gb")
  remainingStorageGB Float @default(0) @map("remaining_storage_gb")
  maxCredits         Int   @default(0) @map("max_credits")
  remainingCredits   Int   @default(0) @map("remaining_credits")

  user           User            @relation("userUsages", fields: [userId], references: [id], onDelete: Cascade)
  subscription   Subscription?   @relation("subscriptionUsage", fields: [subscriptionId], references: [id], onDelete: Cascade)
  creditPurchase CreditPurchase? @relation("purchaseUsage", fields: [creditPurchaseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("usage")
}

model UserQuota {
  id             String  @id @default(cuid())
  userId         String  @unique @map("user_id")
  subscriptionId String? @map("subscription_id")

  // Current Period Limits (from active subscription/plan)
  maxProjects    Int   @default(0) @map("max_projects")
  maxTeams       Int   @default(0) @map("max_teams")
  maxProposals   Int   @default(0) @map("max_proposals")
  maxRequests    Int   @default(0) @map("max_requests")
  maxConnections Int   @default(0) @map("max_connections")
  maxMessages    Int   @default(0) @map("max_messages")
  maxStorageGB   Float @default(0) @map("max_storage_gb")
  maxCredits     Int   @default(0) @map("max_credits")

  // Current Usage Counters
  projectsOwned    Int   @default(0) @map("projects_owned")
  teamsOwned       Int   @default(0) @map("teams_owned")
  proposalsCreated Int   @default(0) @map("proposals_created")
  requestsSent     Int   @default(0) @map("requests_sent")
  connectionsCount Int   @default(0) @map("connections_count")
  messagesSent     Int   @default(0) @map("messages_sent")
  storageUsedGB    Float @default(0) @map("storage_used_gb")

  // Lifetime counters (never reset)
  totalProjectsCreated  Int @default(0) @map("total_projects_created")
  totalTeamsCreated     Int @default(0) @map("total_teams_created")
  totalProposalsCreated Int @default(0) @map("total_proposals_created")
  totalRequestsSent     Int @default(0) @map("total_requests_sent")

  // Period tracking
  currentPeriodStart DateTime? @map("current_period_start")
  currentPeriodEnd   DateTime? @map("current_period_end")
  lastResetAt        DateTime? @map("last_reset_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_quotas")
}

model WebhookLog {
  id        String   @id @default(cuid())
  topic     String // Event type (e.g., BILLING.SUBSCRIPTION.ACTIVATED)
  userId    String // User ID associated with the webhook
  payload   Json // Full webhook payload
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([topic])
  @@index([createdAt])
  @@map("webhook_logs")
}

model WebhookQueue {
  id          String    @id @default(cuid())
  topic       String // Event type
  userId      String // User ID
  payload     Json // Full webhook payload
  status      String    @default("pending") // pending, processing, processed, failed
  attempts    Int       @default(0)
  error       String? // Error message if failed
  createdAt   DateTime  @default(now())
  processedAt DateTime? // When successfully processed
  nextRetryAt DateTime? // When to retry if failed

  @@index([status, attempts])
  @@index([userId])
  @@index([status, nextRetryAt])
  @@index([createdAt])
  @@map("webhook_queue")
}

enum AttachmentType {
  DOCUMENT
  IMAGE
  VIDEO
  AUDIO
  LINK
  OTHER
}

enum Visibility {
  PUBLIC
  PRIVATE
  MEMBERS_ONLY
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ContactMethod {
  EMAIL
  PHONE
  LINKEDIN
  TELEGRAM
  DISCORD
}

enum InvestorKind {
  ANGEL
  VC
  STRATEGIC
  CROWDFUNDING
  GOVERNMENT
  FAMILY_OFFICE
}

enum MentorDirection {
  SEEKING_MENTOR
  OFFERING_MENTORSHIP
}

enum MentorCompensation {
  FREE
  EQUITY
  ADVISORY_SHARES
  PAID
  BARTER
}

enum TeamDirection {
  HIRING
  SEEKING_POSITION
}

enum WorkArrangement {
  REMOTE
  ONSITE
  HYBRID
}

enum SeniorityLevel {
  INTERN
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  PRINCIPAL
  DIRECTOR
  VP
  C_LEVEL
}

enum CompanySize {
  STARTUP_1_10
  SMALL_11_50
  MEDIUM_51_200
  LARGE_201_1000
  ENTERPRISE_1000_PLUS
}

enum CofounderDirection {
  SEEKING_COFOUNDER
  OFFERING_COFOUNDING
}

enum PartnerDirection {
  SEEKING_PARTNER
  OFFERING_PARTNERSHIP
}

enum PartnershipModel {
  REVENUE_SHARE
  FIXED_FEE
  COMMISSION_BASED
  EQUITY_BASED
  BARTER
  JOINT_VENTURE
}

enum ExclusivityType {
  EXCLUSIVE
  NON_EXCLUSIVE
  SEMI_EXCLUSIVE
}

enum CustomerDirection {
  SELLING
  BUYING
}

enum UserType {
  FOUNDER
  INVESTOR
  MEMBER
  HYBRID
}

enum VerificationLevel {
  UNVERIFIED
  EMAIL_VERIFIED
  PHONE_VERIFIED
  IDENTITY_VERIFIED
  BUSINESS_VERIFIED
  PREMIUM_VERIFIED
}

enum InvestorType {
  ANGEL
  VC_FUND
  FAMILY_OFFICE
  CORPORATE_VC
  CROWDFUNDING
  GOVERNMENT
  OTHER
}

enum Commitment {
  PART_TIME
  FULL_TIME
  CONTRACT
  FLEXIBLE
}

enum FundingType {
  EQUITY
  DEBT
  GRANT
  SAFE
  CONVERTIBLE_NOTE
  REVENUE_SHARE
}

enum StartupStage {
  IDEA
  MVP
  BETA
  LAUNCHED
  GROWTH
  SCALE
}

enum EngagementType {
  ONE_OFF
  ONGOING
  MENTORSHIP
  CONSULTING
}

enum PartnershipType {
  STRATEGIC
  TECHNOLOGY
  DISTRIBUTION
  MARKETING
  JOINT_VENTURE
}

enum PartnershipDuration {
  SHORT_TERM
  MID_TERM
  LONG_TERM
}

enum PricingModel {
  FIXED
  HOURLY
  SUBSCRIPTION
  TIERED
  USAGE_BASED
}

enum Availability {
  IMMEDIATE
  WITHIN_WEEK
  WITHIN_MONTH
  NEGOTIABLE
}

enum ProjectStage {
  IDEA
  MVP
  BETA
  LAUNCHED
  GROWTH
  SCALE
  EXIT
}

enum TeamType {
  DEVELOPMENT
  MARKETING
  SALES
  DESIGN
  ADVISORY
  GENERAL
}

enum CompensationType {
  CASH_ONLY
  EQUITY_ONLY
  CASH_AND_EQUITY
  DEFERRED_CASH
  PROFIT_SHARING
  HOURLY_RATE
  PROJECT_BASED
  REVENUE_SHARE
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}

enum AvailabilityType {
  FULL_TIME
  PART_TIME
  CONTRACT
  CONSULTANT
  INTERN
}

enum RemotePreference {
  REMOTE_ONLY
  HYBRID
  ON_SITE
  FLEXIBLE
}

enum InvestmentType {
  EQUITY
  CONVERTIBLE_NOTE
  SAFE
  DEBT
  REVENUE_SHARE
  GRANT
}

enum InvestmentStatus {
  PROPOSED
  UNDER_REVIEW
  DUE_DILIGENCE
  ACCEPTED
  COMPLETED
  REJECTED
  CANCELLED
}

enum InvestmentStage {
  INITIAL
  SERIES_A
  SERIES_B
  SERIES_C
  BRIDGE
  MEZZANINE
}

enum ProposalType {
  INVESTMENT
  MENTORSHIP
  TEAM
  COFOUNDER
  PARTNERSHIP
  CUSTOMER
  MEMBERSHIP
}

enum RoleType {
  INVESTOR
  MENTOR
  TEAM
  COFOUNDER
  PARTNER
  CUSTOMER
  MEMBER
}

enum ProposalStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TeamStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum RequestTargetType {
  PROJECT
  TEAM
  INVESTMENT
  COLLABORATION
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  EXPIRED
}

enum ReviewContextType {
  PROJECT
  TEAM
  INVESTMENT
  GENERAL
  PROPOSAL
}

enum VerificationType {
  IDENTITY
  EDUCATION
  WORK_EXPERIENCE
  COMPANY
  INVESTOR_ACCREDITATION
  TECHNICAL_SKILLS
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum NotificationType {
  REQUEST_RECEIVED
  REQUEST_STATUS
  INVITATION_RECEIVED
  INVITATION_STATUS
  MESSAGE_RECEIVED
  CONNECTION_REQUEST
  PROJECT_UPDATE
  INVESTMENT_UPDATE
  MILESTONE_COMPLETED
  TEAM_INVITATION
  REVIEW_RECEIVED
  VERIFICATION_STATUS
  SYSTEM_ANNOUNCEMENT
  USAGE_ALERT
  FEATURE_UPDATE
  BILLING
  MAINTENANCE
  PAYMENT
  SUBSCRIPTION
  USAGE_OVER_LIMIT
  USAGE_APPROACHING_LIMIT
  PACKAGE_EXPIRED
  SUBSCRIPTION_EXPIRED
}

enum ProfileVisibility {
  PUBLIC
  CONNECTIONS_ONLY
  PRIVATE
}

enum ActivityType {
  LOGIN
  LOGOUT
  PROFILE_UPDATE
  PROJECT_CREATE
  PROJECT_UPDATE
  REQUEST_SEND
  INVESTMENT_PROPOSE
  MESSAGE_SEND
  CONNECTION_REQUEST
  REVIEW_GIVE
}

enum ProposalIntent {
  SEEKING
  OFFERING
}

enum PostType {
  UPDATE
  ANNOUNCEMENT
  MILESTONE
  MEDIA
  POLL
  ARTICLE
  ACHIEVEMENT
}

enum PostVisibility {
  PUBLIC
  CONNECTIONS
  TEAM
  PRIVATE
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum ShareType {
  INTERNAL
  EXTERNAL
  EMBED
}

enum ActorType {
  USER
  SYSTEM
  BOT
  ADMIN
}

enum LogAction {
  USER_LOGIN
  USER_LOGOUT
  USER_REGISTER
  USER_UPDATE
  USER_DELETE
  PROJECT_CREATE
  PROJECT_UPDATE
  PROJECT_DELETE
  PROJECT_PUBLISH
  PROJECT_ARCHIVE
  PROJECT_TRANSFER // New action
  TEAM_CREATE
  TEAM_UPDATE
  TEAM_DELETE
  MEMBER_ADD
  MEMBER_REMOVE
  MEMBER_BLOCK // New action
  MEMBER_UNBLOCK // New action
  MEMBER_ROLE_CHANGE
  INVESTMENT_PROPOSE
  INVESTMENT_ACCEPT
  INVESTMENT_REJECT
  PROPOSAL_CREATE
  PROPOSAL_UPDATE
  PROPOSAL_DELETE
  PROPOSAL_PUBLISH
  SYSTEM_MAINTENANCE
  SYSTEM_UPDATE
  SYSTEM_ALERT
  SECURITY_LOGIN_FAILED
  SECURITY_PASSWORD_CHANGE
  SECURITY_2FA_ENABLE
  SECURITY_SUSPICIOUS_ACTIVITY
}

enum LogCategory {
  USER
  PROJECT
  TEAM
  INVESTMENT
  PROPOSAL
  SYSTEM
  SECURITY
  NOTIFICATION
  PAYMENT
  CONTENT
}

enum LogSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum LogVisibility {
  PUBLIC
  TEAM
  ADMIN
  PRIVATE
}

enum MembershipDirection {
  SEEKING_MEMBERSHIP // Looking to join a project
  OFFERING_MEMBERSHIP // Project offering a position
}

enum TransferStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
  EXPIRED
}

enum Permission {
  VIEW_PROJECT
  EDIT_PROJECT
  DELETE_PROJECT
  MANAGE_MEMBERS
  MANAGE_FINANCES
  MANAGE_INVESTORS
  VIEW_ANALYTICS
  EDIT_PROFILE
  MANAGE_REQUESTS
  MANAGE_INVITATIONS
  CREATE_UPDATES
  MANAGE_MILESTONES
  ADMIN_ACCESS
  TRANSFER_OWNERSHIP // New permission
  BLOCK_MEMBERS // New permission
  MANAGE_PERMISSIONS // New permission
}

enum PlanType {
  FREE
  BASIC
  PROFESSIONAL
  BUSINESS
  ENTERPRISE
  CUSTOM
}

enum BillingPeriod {
  MONTHLY
  QUARTERLY
  YEARLY
  LIFETIME
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED
  EXPIRED
  ON_HOLD
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
  EXPIRED
  DENIED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  E_WALLET // e.g. PayPal balance, Apple Pay, Google Pay
  CRYPTO // e.g. Bitcoin, USDT, ETH
  CASH // e.g. cash on delivery or in-person
  OTHER
}

enum PaymentGateway {
  PAYPAL
  STRIPE
  BRAINTREE
  ADYEN
  RAZORPAY
  SQUARE
  AUTHORIZE_NET
  OTHER
}

enum Interval {
  EVERY_30_DAYS
  ANNUAL
}

enum PromotionUnit {
  PERCENTAGE
  AMOUNT
  CREDITS
  DAYS
  REQUESTS
  TOKENS
}

enum DiscountUnit {
  PERCENTAGE
  AMOUNT
  CREDITS
  REQUESTS
  TOKENS
}

enum BillingType {
  SUBSCRIPTION
  PAY_AS_YOU_GO
  ONE_TIME
}

enum PackageType {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
  CUSTOM
}

enum PurchaseStatus {
  ACTIVE
  CANCELLED
  FROZEN
  EXPIRED
}

enum BillingEventType {
  PROMOTION
  DISCOUNT
  CREDIT
  REFUND
  ADJUSTMENT
}

enum BillingEventStatus {
  PENDING
  APPLIED
  FAILED
  REVERSED
  EXPIRED
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_TRIAL
  USAGE_BOOST
  CREDIT_BONUS
  TIME_EXTENSION
  TIER_UPGRADE
  EARLY_ADAPTER
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  VOLUME
  LOYALTY
  SEASONAL
  REFERRAL
  EARLY_ADAPTER
  BUNDLE
}
